=== SPIRITUAL SYSTEM PROJECT DUMP ===
Path: /d/spiritual-system
Generated: Thu Oct 23 00:08:29 RTZ 2025
=====================================

üì¶ PACKAGE.JSON:
{
  "name": "spiritual-system",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@react-three/fiber": "^8.15.11",
    "@react-three/drei": "^9.88.13",
    "three": "^0.158.0",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@types/three": "^0.158.2",
    "@vitejs/plugin-react": "^4.1.1",
    "typescript": "^5.2.2",
    "vite": "^4.5.0"
  }
}

üîß SOURCE CODE:

--- src/App.css ---
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: #0f0f23;
  color: white;
  overflow: hidden;
}

.app {
  height: 100vh;
  position: relative;
}

.scene-container {
  width: 100%;
  height: 100%;
  position: relative;
}

.interface-container {
  position: absolute;
  top: 0;
  right: 0;
  width: 400px;
  height: 100%;
  background: rgba(26, 26, 46, 0.95);
  backdrop-filter: blur(10px);
  border-left: 1px solid #333;
  overflow-y: auto;
  z-index: 10;
}

.transition-screen {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.portal-animation {
  width: 100px;
  height: 100px;
  border: 4px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 20px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.user-interface {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.ui-header {
  padding: 20px;
  background: rgba(0, 0, 0, 0.3);
  border-bottom: 1px solid #333;
  text-align: center;
}

.ui-header h2 {
  color: #4ecdc4;
  margin-bottom: 8px;
}

.ui-header p {
  color: #888;
  font-size: 0.9em;
}

.tabs {
  display: flex;
  background: rgba(0, 0, 0, 0.2);
  border-bottom: 1px solid #333;
}

.tabs button {
  flex: 1;
  padding: 12px;
  background: transparent;
  border: none;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
  border-bottom: 3px solid transparent;
}

.tabs button:hover {
  background: rgba(255, 255, 255, 0.1);
}

.tabs button.active {
  border-bottom-color: #4ecdc4;
  background: rgba(78, 205, 196, 0.1);
}

.tab-content {
  flex: 1;
  overflow-y: auto;
}

--- src/App.tsx ---
import React from 'react';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, Environment } from '@react-three/drei';
import { RealitySwitcher } from './components/RealitySwitcher';
import { EnhancedRoomSystem } from './components/3d/EnhancedRoomSystem';
import { CabinetSystem } from './components/CabinetSystem';
import { UserInterface } from './components/ui/UserInterface';
import { useSystemStore } from './stores/system-store';
import './App.css';

function App() {
  const { currentMode, realityTransition } = useSystemStore();

  if (realityTransition) {
    return (
      <div className="transition-screen">
        <div className="portal-animation"></div>
        <h2>–ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏...</h2>
      </div>
    );
  }

  return (
    <div className="app">
      {currentMode === 'cabinet' ? (
        <CabinetSystem />
      ) : (
        <>
          {/* 3D –∫–æ–º–Ω–∞—Ç–∞ —Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
          <div className="scene-container">
            <Canvas camera={{ position: [10, 8, 10], fov: 50 }}>
              <color attach="background" args={['#1a1a2e']} />
              <ambientLight intensity={0.6} />
              <pointLight position={[10, 10, 10]} intensity={1} />
              <spotLight position={[-10, 10, -10]} angle={0.3} intensity={0.8} />
              
              <EnhancedRoomSystem />
              
              <OrbitControls 
                enablePan={true}
                enableZoom={true}
                enableRotate={true}
                minDistance={5}
                maxDistance={25}
              />
              <Environment preset="city" />
            </Canvas>
          </div>
          
          {/* –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
          <div className="interface-container">
            <UserInterface />
          </div>
        </>
      )}
      
      <RealitySwitcher />
    </div>
  );
}

export default App;

--- src/components/3d/CustomText.tsx ---
import React, { useMemo } from 'react';
import { useThree } from '@react-three/fiber';

interface CustomTextProps {
  position: [number, number, number];
  fontSize: number;
  color: string;
  content: string;
}

export const CustomText: React.FC<CustomTextProps> = ({ 
  position, 
  fontSize, 
  color, 
  content 
}) => {
  const { gl } = useThree();
  
  // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ø—Ä–∞–π—Ç–æ–≤ –∏–ª–∏ –º–µ—à–µ–π
  return (
    <group position={position}>
      {/* –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ –±—É–∫–≤—ã */}
      <mesh>
        <planeGeometry args={[fontSize * 2, fontSize]} />
        <meshBasicMaterial 
          color={color}
          transparent
          opacity={0.8}
        />
      </mesh>
    </group>
  );
};

--- src/components/3d/DomeCitySystem.tsx ---
import React, { useRef, useMemo } from 'react';
import { useFrame } from '@react-three/fiber';
import { Sphere, Text } from '@react-three/drei';
import { useRoomStore } from '../../stores/room-store';
import * as THREE from 'three';

export const DomeCitySystem: React.FC = () => {
  const { users, connections, currentUser } = useRoomStore();
  const domeGroupRef = useRef<any>();
  const timeUniform = useRef({ value: 0 });

  useFrame((state) => {
    timeUniform.current.value = state.clock.elapsedTime;
    
    if (domeGroupRef.current) {
      // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
      domeGroupRef.current.rotation.y = state.clock.elapsedTime * 0.01;
    }
  });

  // 8 —É—Ä–æ–≤–Ω–µ–π –∫—É–ø–æ–ª–æ–≤ (–æ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫ –≤–Ω–µ—à–Ω–µ–º—É)
  const domeLevels = [
    { id: 1, radius: 45, name: '–§–∏–∑–∏—á–µ—Å–∫–∏–π', color: '#4ecdc4', opacity: 0.1 },
    { id: 2, radius: 50, name: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π', color: '#ff6b6b', opacity: 0.08 },
    { id: 3, radius: 55, name: '–ú–µ–Ω—Ç–∞–ª—å–Ω—ã–π', color: '#ffd93d', opacity: 0.06 },
    { id: 4, radius: 60, name: '–î—É—Ö–æ–≤–Ω—ã–π', color: '#9d4edd', opacity: 0.05 },
    { id: 5, radius: 65, name: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π', color: '#45b7d1', opacity: 0.04 },
    { id: 6, radius: 70, name: '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π', color: '#96ceb4', opacity: 0.03 },
    { id: 7, radius: 75, name: '–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π', color: '#fd79a8', opacity: 0.02 },
    { id: 8, radius: 80, name: '–¢—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ç–Ω—ã–π', color: '#ffffff', opacity: 0.01 }
  ];

  return (
    <group ref={domeGroupRef}>
      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫—É–ø–æ–ª (–ø–æ–ª—É—Å—Ñ–µ—Ä–∞) */}
      <MainDome />
      
      {/* –£—Ä–æ–≤–Ω–∏ –∫—É–ø–æ–ª–æ–≤ */}
      {domeLevels.map(level => (
        <DomeLevel 
          key={level.id}
          level={level}
          users={users.filter((_, index) => index % 8 === level.id - 1)}
          currentUser={currentUser}
          connections={connections}
        />
      ))}
      
      {/* –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –Ω–µ–±–æ */}
      <InfinitySky />
      
      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ "–≥–æ—Ä–æ–¥–µ" –Ω–∞ –ø–æ–ª—É */}
      <CityUsers 
        users={users}
        currentUser={currentUser}
        connections={connections}
      />
    </group>
  );
};

const MainDome: React.FC = () => {
  const domeRef = useRef<any>();
  const timeUniform = useRef({ value: 0 });

  useFrame((state) => {
    timeUniform.current.value = state.clock.elapsedTime;
  });

  const domeShader = useMemo(() => {
    return {
      uniforms: {
        time: { value: 0 }
      },
      vertexShader: `
        varying vec3 vPosition;
        varying vec2 vUv;
        
        void main() {
          vPosition = position;
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        uniform float time;
        varying vec3 vPosition;
        varying vec2 vUv;
        
        void main() {
          // –û—Å–Ω–æ–≤–∞ –∫—É–ø–æ–ª–∞ - –≥–ª—É–±–æ–∫–∏–π —Å–∏–Ω–∏–π
          vec3 domeColor = vec3(0.05, 0.08, 0.15);
          
          // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–∑–æ—Ä—ã
          float energy1 = sin(vPosition.x * 10.0 + time * 2.0) * 0.5 + 0.5;
          float energy2 = cos(vPosition.z * 8.0 + time * 1.5) * 0.5 + 0.5;
          float energy3 = sin(vPosition.y * 12.0 + time * 3.0) * 0.5 + 0.5;
          
          vec3 energyColor = vec3(0.3, 0.6, 1.0) * (energy1 * energy2 * energy3) * 0.3;
          
          // –ó–≤–µ–∑–¥—ã
          float stars = step(0.999, sin(vPosition.x * 200.0) * sin(vPosition.y * 200.0) * sin(vPosition.z * 200.0));
          vec3 starsColor = vec3(1.0, 1.0, 0.9) * stars * 0.5;
          
          vec3 finalColor = domeColor + energyColor + starsColor;
          
          // –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫ –≤–µ—Ä—à–∏–Ω–µ
          float alpha = smoothstep(-0.5, 1.0, vPosition.y) * 0.8;
          
          gl_FragColor = vec4(finalColor, alpha);
        }
      `,
      transparent: true,
      side: THREE.BackSide
    };
  }, []);

  return (
    <Sphere ref={domeRef} args={[40, 64, 64, 0, Math.PI * 2, 0, Math.PI * 0.5]}>
      <shaderMaterial
        uniforms={Object.assign({}, domeShader.uniforms, { time: timeUniform.current })}
        vertexShader={domeShader.vertexShader}
        fragmentShader={domeShader.fragmentShader}
        transparent={true}
        side={THREE.BackSide}
      />
    </Sphere>
  );
};

const DomeLevel: React.FC<{ level: any; users: any[]; currentUser: any; connections: any[] }> = ({
  level,
  users,
  currentUser,
  connections
}) => {
  const levelRef = useRef<any>();

  useFrame((state) => {
    if (levelRef.current) {
      // –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–æ —Å–≤–æ–µ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
      levelRef.current.rotation.y = state.clock.elapsedTime * (0.005 + level.id * 0.002);
    }
  });

  return (
    <group ref={levelRef}>
      {/* –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) */}
      <Sphere args={[level.radius, 32, 32, 0, Math.PI * 2, 0, Math.PI * 0.5]}>
        <meshBasicMaterial 
          color={level.color}
          transparent
          opacity={level.opacity}
          wireframe={true}
        />
      </Sphere>

      {/* –ü—Ä–æ–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ */}
      {users.map((user, index) => {
        const angle = (index / users.length) * Math.PI * 2;
        const userPosition: [number, number, number] = [
          Math.cos(angle) * (level.radius - 5),
          0, // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ "–∑–µ–º–ª–µ"
          Math.sin(angle) * (level.radius - 5)
        ];

        return (
          <UserProjection
            key={user.id}
            user={user}
            position={userPosition}
            isCurrentUser={user.id === currentUser.id}
            levelColor={level.color}
            levelName={level.name}
          />
        );
      })}
    </group>
  );
};

const InfinitySky: React.FC = () => {
  const skyRef = useRef<any>();
  const timeUniform = useRef({ value: 0 });

  useFrame((state) => {
    timeUniform.current.value = state.clock.elapsedTime;
  });

  const skyShader = useMemo(() => {
    return {
      uniforms: {
        time: { value: 0 }
      },
      vertexShader: `
        varying vec3 vPosition;
        varying vec2 vUv;
        
        void main() {
          vPosition = position;
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        uniform float time;
        varying vec3 vPosition;
        varying vec2 vUv;
        
        // –®—É–º –¥–ª—è –æ–±–ª–∞–∫–æ–≤
        float hash(vec2 p) {
          return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
        }
        
        float noise(vec2 p) {
          vec2 i = floor(p);
          vec2 f = fract(p);
          f = f * f * (3.0 - 2.0 * f);
          
          float a = hash(i);
          float b = hash(i + vec2(1.0, 0.0));
          float c = hash(i + vec2(0.0, 1.0));
          float d = hash(i + vec2(1.0, 1.0));
          
          return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);
        }
        
        void main() {
          // –ì—Ä–∞–¥–∏–µ–Ω—Ç –Ω–µ–±–∞ –æ—Ç —Ç–µ–º–Ω–æ-—Å–∏–Ω–µ–≥–æ –∫ —Å–≤–µ—Ç–ª–æ–º—É
          vec3 skyColor = mix(
            vec3(0.05, 0.1, 0.3),
            vec3(0.3, 0.5, 0.9),
            smoothstep(-1.0, 1.0, vPosition.y)
          );
          
          // –û–±–ª–∞–∫–∞
          vec2 cloudUV = vUv * 3.0 + time * 0.1;
          float clouds = noise(cloudUV) * 0.5 + noise(cloudUV * 2.0) * 0.25;
          clouds = smoothstep(0.3, 0.8, clouds);
          
          vec3 cloudColor = vec3(1.0, 1.0, 1.0) * clouds * 0.3;
          
          // –î–∞–ª–µ–∫–∏–µ –∑–≤–µ–∑–¥—ã
          float stars = step(0.998, hash(vUv * 100.0));
          vec3 starsColor = vec3(1.0, 1.0, 1.0) * stars * 0.5;
          
          // –≠—Ñ—Ñ–µ–∫—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ - fade –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É
          float horizon = smoothstep(0.0, 0.3, vPosition.y);
          
          vec3 finalColor = (skyColor + cloudColor + starsColor) * horizon;
          
          gl_FragColor = vec4(finalColor, 1.0);
        }
      `,
      side: THREE.BackSide
    };
  }, []);

  return (
    <Sphere ref={skyRef} args={[200, 32, 32]}>
      <shaderMaterial
        uniforms={Object.assign({}, skyShader.uniforms, { time: timeUniform.current })}
        vertexShader={skyShader.vertexShader}
        fragmentShader={skyShader.fragmentShader}
        side={THREE.BackSide}
      />
    </Sphere>
  );
};

const CityUsers: React.FC<{ users: any[]; currentUser: any; connections: any[] }> = ({
  users,
  currentUser,
  connections
}) => {
  // –°–æ–∑–¥–∞–µ–º "–≥–æ—Ä–æ–¥" –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∫—É–ø–æ–ª–∞
  const gridSize = Math.ceil(Math.sqrt(users.length));
  const spacing = 8;

  return (
    <group>
      {/* –ó–µ–º–ª—è */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.5, 0]}>
        <circleGeometry args={[35, 32]} />
        <meshStandardMaterial 
          color="#2c3e50"
          transparent
          opacity={0.8}
        />
      </mesh>

      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –≥–æ—Ä–æ–¥–µ */}
      {users.map((user, index) => {
        const row = Math.floor(index / gridSize);
        const col = index % gridSize;
        
        const position: [number, number, number] = [
          (col - gridSize / 2) * spacing,
          0,
          (row - gridSize / 2) * spacing
        ];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞
        const distance = Math.sqrt(position[0] ** 2 + position[2] ** 2);
        if (distance > 30) return null;

        return (
          <CityCitizen
            key={user.id}
            user={user}
            position={position}
            isCurrentUser={user.id === currentUser.id}
          />
        );
      })}

      {/* –î–æ—Ä–æ–≥–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ */}
      {connections.map(connection => {
        const user1 = users.find(u => u.id === connection.userId1);
        const user2 = users.find(u => u.id === connection.userId2);
        
        if (!user1 || !user2) return null;

        const index1 = users.findIndex(u => u.id === user1.id);
        const index2 = users.findIndex(u => u.id === user2.id);
        
        const row1 = Math.floor(index1 / gridSize);
        const col1 = index1 % gridSize;
        const row2 = Math.floor(index2 / gridSize);
        const col2 = index2 % gridSize;
        
        const pos1: [number, number, number] = [
          (col1 - gridSize / 2) * spacing,
          0,
          (row1 - gridSize / 2) * spacing
        ];
        
        const pos2: [number, number, number] = [
          (col2 - gridSize / 2) * spacing,
          0,
          (row2 - gridSize / 2) * spacing
        ];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞
        const dist1 = Math.sqrt(pos1[0] ** 2 + pos1[2] ** 2);
        const dist2 = Math.sqrt(pos2[0] ** 2 + pos2[2] ** 2);
        if (dist1 > 30 || dist2 > 30) return null;

        return (
          <CityRoad
            key={connection.id}
            start={pos1}
            end={pos2}
            strength={connection.strength}
          />
        );
      })}
    </group>
  );
};

const CityCitizen: React.FC<{ user: any; position: [number, number, number]; isCurrentUser: boolean }> = ({
  user,
  position,
  isCurrentUser
}) => {
  const citizenRef = useRef<any>();

  useFrame((state) => {
    if (citizenRef.current) {
      // –õ–µ–≥–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è –¥–ª—è –æ–∂–∏–≤–ª–µ–Ω–∏—è
      const scale = 1 + Math.sin(state.clock.elapsedTime * 2 + user.id.length) * 0.1;
      citizenRef.current.scale.setScalar(scale);
    }
  });

  return (
    <group position={position} ref={citizenRef}>
      {/* –¢–µ–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <group position={[0, 0.5, 0]}>
        <Sphere args={[0.3, 8, 8]}>
          <meshStandardMaterial 
            color={getIntentionColor(user.primaryIntention)}
            emissive={getIntentionColor(user.primaryIntention)}
            emissiveIntensity={0.3}
          />
        </Sphere>
        
        {/* –ì–æ–ª–æ–≤–∞ */}
        <Sphere args={[0.2, 8, 8]} position={[0, 0.5, 0]}>
          <meshStandardMaterial color="#f8c291" />
        </Sphere>
      </group>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Text
        position={[0, 1.8, 0]}
        fontSize={0.3}
        color="white"
        anchorX="center"
        anchorY="middle"
      >
        {user.primaryIntention?.emoji || 'üéØ'}
      </Text>

      <Text
        position={[0, -0.5, 0]}
        fontSize={0.2}
        color={user.honestyScore > 0.8 ? '#4ecdc4' : user.honestyScore > 0.6 ? '#ffd93d' : '#ff6b6b'}
        anchorX="center"
        anchorY="middle"
      >
        {user.name}
      </Text>

      {/* –°–≤–µ—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {isCurrentUser && (
        <pointLight
          color={getIntentionColor(user.primaryIntention)}
          intensity={0.5}
          distance={3}
        />
      )}
    </group>
  );
};

const CityRoad: React.FC<{ start: [number, number, number]; end: [number, number, number]; strength: number }> = ({
  start,
  end,
  strength
}) => {
  const roadGeometry = useMemo(() => {
    const points = [
      new THREE.Vector3(...start),
      new THREE.Vector3(...end)
    ];
    return new THREE.BufferGeometry().setFromPoints(points);
  }, [start, end]);

  return (
    <line geometry={roadGeometry}>
      <lineBasicMaterial 
        color="#34495e"
        transparent
        opacity={0.3 + strength * 0.3}
        linewidth={1}
      />
    </line>
  );
};

const UserProjection: React.FC<{ user: any; position: [number, number, number]; isCurrentUser: boolean; levelColor: string; levelName: string }> = ({
  user,
  position,
  isCurrentUser,
  levelColor,
  levelName
}) => {
  return (
    <group position={position}>
      {/* –ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫—É–ø–æ–ª–∞ */}
      <Sphere args={[0.5, 8, 8]}>
        <meshBasicMaterial 
          color={levelColor}
          transparent
          opacity={0.5}
        />
      </Sphere>

      <Text
        position={[0, 1, 0]}
        fontSize={0.2}
        color={levelColor}
        anchorX="center"
        anchorY="middle"
      >
        {levelName}
      </Text>
    </group>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getIntentionColor = (intention: any): string => {
  const colors: { [key: string]: string } = {
    'learning': '#4ecdc4',
    'collaboration': '#45b7d1', 
    'support': '#96ceb4',
    'creative': '#ff6b6b',
    'social': '#ffd93d',
    'default': '#9d4edd'
  };
  return colors[intention?.type || 'default'];
};

--- src/components/3d/EnhancedRoomSystem.tsx ---
import React, { useRef } from 'react';
import { useFrame } from '@react-three/fiber';
import { Sphere, Line } from '@react-three/drei';
import { useRoomStore } from '../../stores/room-store';
import { CustomText } from './CustomText';

export const EnhancedRoomSystem: React.FC = () => {
  const { users, connections, currentUser, activeInteractions } = useRoomStore();
  
  return (
    <group>
      {/* –õ–∞–Ω–¥—à–∞—Ñ—Ç –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –æ—Ä–±–∏—Ç */}
      <EnergyLandscape />
      
      {/* –ö–æ–º–Ω–∞—Ç–∞ */}
      <mesh position={[0, -25, 0]} rotation={[-Math.PI / 2, 0, 0]}>
        <planeGeometry args={[50, 50]} />
        <meshStandardMaterial color="#1a3a4a" />
      </mesh>
      
      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
      {users.map(user => (
        <UserWithAura 
          key={user.id}
          user={user}
          isCurrentUser={user.id === currentUser.id}
        />
      ))}
      
      {/* –ê—É—Ä–æ—Ä–∞-—ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö */}
      {activeInteractions.map(interaction => (
        <AuroraEffect 
          key={interaction.id}
          interaction={interaction}
          users={users}
        />
      ))}
    </group>
  );
};

const EnergyLandscape: React.FC = () => {
  const meshRef = useRef<any>();
  
  useFrame((state) => {
    if (meshRef.current) {
      meshRef.current.rotation.z = Math.sin(state.clock.elapsedTime * 0.1) * 0.1;
    }
  });
  
  return (
    <mesh ref={meshRef} rotation={[Math.PI / 2, 0, 0]} position={[0, 0.1, 0]}>
      <planeGeometry args={[45, 45, 32, 32]} />
      <meshBasicMaterial color="#2c3e50" transparent opacity={0.1} wireframe />
    </mesh>
  );
};

const UserWithAura: React.FC<{ user: any; isCurrentUser: boolean }> = ({ user, isCurrentUser }) => {
  const auraRef = useRef<any>();
  const { connections } = useRoomStore();
  
  useFrame((state) => {
    if (auraRef.current) {
      const intensity = 0.5 + Math.sin(state.clock.elapsedTime * 2) * 0.3;
      auraRef.current.scale.setScalar(1 + intensity * 0.1);
    }
  });
  
  const userConnections = connections.filter(conn => 
    conn.userId1 === user.id || conn.userId2 === user.id
  );
  
  const hasActiveConnections = userConnections.length > 0;
  
  return (
    <group position={user.position}>
      {/* –ê—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {hasActiveConnections && (
        <Sphere ref={auraRef} args={[isCurrentUser ? 1.2 : 0.7, 32, 32]}>
          <meshBasicMaterial 
            color="#4ecdc4"
            transparent
            opacity={0.2}
            wireframe
          />
        </Sphere>
      )}
      
      {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ñ–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <Sphere args={[isCurrentUser ? 1 : 0.5, 32, 32]}>
        <meshStandardMaterial 
          color={getIntentionColor(user.primaryIntention)}
          transparent
          opacity={0.9}
          emissive={getIntentionColor(user.primaryIntention)}
          emissiveIntensity={hasActiveConnections ? 0.5 : 0.1}
        />
      </Sphere>
      
      {/* –û—Ä–±–∏—Ç—ã –¥–æ–≤–µ—Ä–∏—è (–ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏) */}
      {userConnections.map((connection, index) => (
        <TrustOrbit 
          key={connection.id}
          level={index + 1}
          user={user}
          isActive={hasActiveConnections}
        />
      ))}
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      <UserInfo user={user} isCurrentUser={isCurrentUser} />
    </group>
  );
};

const TrustOrbit: React.FC<{ level: number; user: any; isActive: boolean }> = ({ 
  level, user, isActive 
}) => {
  const orbitRef = useRef<any>();
  
  useFrame((state) => {
    if (orbitRef.current && isActive) {
      orbitRef.current.rotation.y = state.clock.elapsedTime * (0.2 / level);
    }
  });
  
  if (!isActive) return null;
  
  return (
    <mesh ref={orbitRef} rotation={[Math.PI / 2, 0, 0]}>
      <ringGeometry args={[level, level + 0.05, 64]} />
      <meshBasicMaterial 
        color={getAuroraColor(level)}
        transparent
        opacity={0.6}
      />
    </mesh>
  );
};

const AuroraEffect: React.FC<{ interaction: any; users: any[] }> = ({ interaction, users }) => {
  const user1 = users.find(u => u.id === interaction.userId1);
  const user2 = users.find(u => u.id === interaction.userId2);
  
  if (!user1 || !user2) return null;
  
  const points: [number, number, number][] = [
    [user1.position[0], user1.position[1], user1.position[2]],
    [user2.position[0], user2.position[1], user2.position[2]]
  ];
  
  return (
    <Line
      points={points}
      color={getAuroraColor(interaction.strength)}
      lineWidth={interaction.strength * 5}
      transparent
      opacity={0.8}
    />
  );
};

const UserInfo: React.FC<{ user: any; isCurrentUser: boolean }> = ({ user, isCurrentUser }) => {
  const height = isCurrentUser ? 1.2 : 0.7;
  
  return (
    <group>
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏—è */}
      <CustomText
        position={[0, height + 0.3, 0]}
        fontSize={0.2}
        color="white"
        content={user.primaryIntention?.emoji || 'üéØ'}
      />
      
      {/* –ò–º—è –∏ —É—Ä–æ–≤–µ–Ω—å —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ */}
      <CustomText
        position={[0, -height - 0.3, 0]}
        fontSize={0.15}
        color={user.honestyScore > 0.8 ? '#4ecdc4' : user.honestyScore > 0.6 ? '#ffd93d' : '#ff6b6b'}
        content={`${user.name} (${Math.round(user.honestyScore * 100)}%)`}
      />
    </group>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getIntentionColor = (intention: any): string => {
  const colors: { [key: string]: string } = {
    'learning': '#4ecdc4',
    'collaboration': '#45b7d1', 
    'support': '#96ceb4',
    'creative': '#ff6b6b',
    'social': '#ffd93d',
    'default': '#9d4edd'
  };
  return colors[intention?.type || 'default'];
};

const getAuroraColor = (level: number): string => {
  const colors = ['#4ecdc4', '#45b7d1', '#96ceb4', '#ff6b6b'];
  return colors[(level - 1) % colors.length];
};

--- src/components/3d/HorizontalOrbits.tsx ---
import React from 'react';
import { Torus } from '@react-three/drei';

const ORBITS_CONFIG = [
  { radius: 1, color: '#ff6b6b', tube: 0.05 },
  { radius: 2, color: '#4ecdc4', tube: 0.05 },
  { radius: 3, color: '#45b7d1', tube: 0.05 },
  { radius: 4, color: '#96ceb4', tube: 0.05 },
];

export const HorizontalOrbits: React.FC = () => {
  return (
    <group rotation={[Math.PI / 2, 0, 0]}>
      {ORBITS_CONFIG.map((orbit, index) => (
        <Torus 
          key={index}
          args={[orbit.radius, orbit.tube, 16, 100]} 
          rotation={[0, 0, 0]}
        >
          <meshStandardMaterial 
            color={orbit.color}
            transparent
            opacity={0.6}
          />
        </Torus>
      ))}
    </group>
  );
};

--- src/components/3d/NaturalLandscape.tsx ---
import React from 'react';
import { Sphere } from '@react-three/drei';

export const NaturalLandscape: React.FC = () => {
  return (
    <group>
      {/* –§–æ–Ω - –±–æ–ª—å—à–∞—è —Å—Ñ–µ—Ä–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –Ω–µ–±–æ */}
      <Sphere args={[20, 32, 32]} rotation={[0, 0, 0]}>
        <meshBasicMaterial 
          color="#0a0a2a"
          side={1}
          transparent
          opacity={0.3}
        />
      </Sphere>
      
      {/* –ù–µ–±–æ–ª—å—à–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
      <Sphere position={[3, -2, 2]} args={[0.1, 8, 8]}>
        <meshBasicMaterial color="#4ecdc4" transparent opacity={0.6} />
      </Sphere>
      
      <Sphere position={[-2, -1, -3]} args={[0.15, 8, 8]}>
        <meshBasicMaterial color="#ff6b6b" transparent opacity={0.6} />
      </Sphere>
      
      <Sphere position={[4, 1, -1]} args={[0.12, 8, 8]}>
        <meshBasicMaterial color="#45b7d1" transparent opacity={0.6} />
      </Sphere>
    </group>
  );
};

--- src/components/3d/ReflectiveSpheres.tsx ---
import React from 'react';
import { Sphere } from '@react-three/drei';

const SPHERE_POSITIONS = [
  [1, 0.5, 1], [-1, 0.5, -1], [1, -0.5, -1], [-1, -0.5, 1],
  [0, 1, 0], [0, -1, 0], [0, 0, 1.5]
];

export const ReflectiveSpheres: React.FC = () => {
  return (
    <group>
      {SPHERE_POSITIONS.map((position, index) => (
        <Sphere
          key={index}
          position={position as [number, number, number]}
          args={[0.2, 16, 16]}
        >
          <meshStandardMaterial 
            color="#9d4edd"
            transparent
            opacity={0.5}
            emissive="#9d4edd"
            emissiveIntensity={0.2}
          />
        </Sphere>
      ))}
    </group>
  );
};

--- src/components/3d/TimeCompressionPlane.tsx ---
import React, { useRef, useMemo } from 'react';
import { useFrame } from '@react-three/fiber';
import { useRoomStore } from '../../stores/room-store';
import * as THREE from 'three';

export const TimeCompressionPlane: React.FC = () => {
  const { users, connections, currentUser } = useRoomStore();
  const planeGroupRef = useRef<any>();
  const timeUniform = useRef({ value: 0 });

  useFrame((state) => {
    const time = state.clock.elapsedTime;
    timeUniform.current.value = time;
    
    if (planeGroupRef.current) {
      // –í—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏
      planeGroupRef.current.rotation.y = -time * 0.2;
    }
  });

  return (
    <group ref={planeGroupRef}>
      {/* –û—Å–Ω–æ–≤–Ω–∞—è –ø–ª–æ—Å–∫–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ */}
      <CompressionPlane timeUniform={timeUniform} />
      
      {/* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ */}
      <PlaneUsers 
        users={users}
        currentUser={currentUser}
        connections={connections}
        timeUniform={timeUniform}
      />
      
      {/* –≠—Ñ—Ñ–µ–∫—Ç—ã —Å–∂–∞—Ç–∏—è */}
      <CompressionEffects timeUniform={timeUniform} />
      
      {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ª–Ω—ã */}
      <VerticalWaves timeUniform={timeUniform} />
    </group>
  );
};

const CompressionPlane: React.FC<{ timeUniform: any }> = ({ timeUniform }) => {
  const planeRef = useRef<any>();
  const planeMaterialRef = useRef<any>();

  useFrame((state) => {
    if (planeMaterialRef.current) {
      planeMaterialRef.current.uniforms.time.value = state.clock.elapsedTime;
    }
  });

  const planeShader = useMemo(() => {
    return {
      uniforms: {
        time: { value: 0 },
        resolution: { value: new THREE.Vector2(100, 100) }
      },
      vertexShader: `
        uniform float time;
        varying vec3 vPosition;
        varying vec2 vUv;
        
        void main() {
          vPosition = position;
          vUv = uv;
          
          // –°–∂–∞—Ç–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É - —É–º–µ–Ω—å—à–∞–µ–º Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
          float distanceToCenter = length(position.xz);
          float compression = 1.0 - smoothstep(0.0, 25.0, distanceToCenter) * 0.3;
          
          // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ - –≤–æ–ª–Ω—ã
          float verticalWave = sin(distanceToCenter * 2.0 - time * 3.0) * 0.5;
          
          vec3 newPosition = position;
          newPosition.y = (position.y + verticalWave) * compression;
          
          gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
        }
      `,
      fragmentShader: `
        uniform float time;
        uniform vec2 resolution;
        varying vec3 vPosition;
        varying vec2 vUv;
        
        // –§—É–Ω–∫—Ü–∏—è —à—É–º–∞ –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä
        float hash(vec2 p) {
          return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);
        }
        
        float noise(vec2 p) {
          vec2 i = floor(p);
          vec2 f = fract(p);
          f = f * f * (3.0 - 2.0 * f);
          
          float a = hash(i);
          float b = hash(i + vec2(1.0, 0.0));
          float c = hash(i + vec2(0.0, 1.0));
          float d = hash(i + vec2(1.0, 1.0));
          
          return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);
        }
        
        void main() {
          // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç –ø–ª–æ—Å–∫–æ—Å—Ç–∏ - –≥–ª—É–±–æ–∫–∏–π —Å–∏–Ω–∏–π
          vec3 baseColor = vec3(0.05, 0.08, 0.15);
          
          // –°–ø–∏—Ä–∞–ª—å–Ω—ã–µ —É–∑–æ—Ä—ã —Å–∂–∞—Ç–∏—è
          float angle = atan(vPosition.z, vPosition.x);
          float radius = length(vPosition.xz);
          
          // –°–ø–∏—Ä–∞–ª—å, –≤—Ä–∞—â–∞—é—â–∞—è—Å—è –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏
          float spiral = sin(angle * 8.0 + time * 4.0 - radius * 2.0);
          vec3 spiralColor = vec3(0.3, 0.6, 1.0) * spiral * 0.3;
          
          // –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫—Ä—É–≥–∏ —Å–∂–∞—Ç–∏—è
          float circles = sin(radius * 10.0 - time * 5.0) * 0.5 + 0.5;
          vec3 circlesColor = vec3(0.4, 0.8, 0.9) * circles * 0.2;
          
          // –≠—Ñ—Ñ–µ–∫—Ç –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ü–µ–Ω—Ç—Ä—É
          float flowToCenter = smoothstep(25.0, 0.0, radius);
          vec3 flowColor = vec3(0.2, 0.5, 0.8) * flowToCenter * 0.4;
          
          // –¢–µ–∫—Å—Ç—É—Ä–∞ –¥–æ—Ä–æ–≥ (–≥—Ä–∏–¥)
          float grid1 = step(0.95, sin(vPosition.x * 2.0)) * 0.1;
          float grid2 = step(0.95, sin(vPosition.z * 2.0)) * 0.1;
          vec3 gridColor = vec3(0.8, 0.9, 1.0) * (grid1 + grid2);
          
          // –°–æ–±–∏—Ä–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ü–≤–µ—Ç
          vec3 finalColor = baseColor + spiralColor + circlesColor + flowColor + gridColor;
          
          // –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ –∫ –∫—Ä–∞—è–º (–≤–∏–Ω—å–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
          float vignette = 1.0 - smoothstep(20.0, 25.0, radius);
          finalColor *= vignette;
          
          gl_FragColor = vec4(finalColor, 1.0);
        }
      `,
      side: THREE.DoubleSide
    };
  }, []);

  return (
    <mesh ref={planeRef} rotation={[-Math.PI / 2, 0, 0]} position={[0, -1, 0]}>
      <planeGeometry args={[50, 50, 100, 100]} />
      <shaderMaterial
        ref={planeMaterialRef}
        attach="material"
        args={[planeShader]}
      />
    </mesh>
  );
};

const PlaneUsers: React.FC<{ users: any[]; currentUser: any; connections: any[]; timeUniform: any }> = ({
  users,
  currentUser,
  connections,
  timeUniform
}) => {
  const gridSize = Math.ceil(Math.sqrt(users.length));
  const spacing = 6;

  return (
    <group>
      {users.map((user, index) => {
        const row = Math.floor(index / gridSize);
        const col = index % gridSize;
        
        const basePosition: [number, number, number] = [
          (col - gridSize / 2) * spacing,
          0,
          (row - gridSize / 2) * spacing
        ];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–∑–∏—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–∞
        const distance = Math.sqrt(basePosition[0] ** 2 + basePosition[2] ** 2);
        if (distance > 20) return null;

        return (
          <PlaneCitizen
            key={user.id}
            user={user}
            basePosition={basePosition}
            isCurrentUser={user.id === currentUser.id}
            timeUniform={timeUniform}
          />
        );
      })}

      {/* –°–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ */}
      {connections.map(connection => {
        const user1 = users.find(u => u.id === connection.userId1);
        const user2 = users.find(u => u.id === connection.userId2);
        
        if (!user1 || !user2) return null;

        const index1 = users.findIndex(u => u.id === user1.id);
        const index2 = users.findIndex(u => u.id === user2.id);
        
        const row1 = Math.floor(index1 / gridSize);
        const col1 = index1 % gridSize;
        const row2 = Math.floor(index2 / gridSize);
        const col2 = index2 % gridSize;
        
        const pos1: [number, number, number] = [
          (col1 - gridSize / 2) * spacing,
          0,
          (row1 - gridSize / 2) * spacing
        ];
        
        const pos2: [number, number, number] = [
          (col2 - gridSize / 2) * spacing,
          0,
          (row2 - gridSize / 2) * spacing
        ];

        const dist1 = Math.sqrt(pos1[0] ** 2 + pos1[2] ** 2);
        const dist2 = Math.sqrt(pos2[0] ** 2 + pos2[2] ** 2);
        if (dist1 > 20 || dist2 > 20) return null;

        return (
          <PlaneConnection
            key={connection.id}
            start={pos1}
            end={pos2}
            strength={connection.strength}
            timeUniform={timeUniform}
          />
        );
      })}
    </group>
  );
};

const PlaneCitizen: React.FC<{ user: any; basePosition: [number, number, number]; isCurrentUser: boolean; timeUniform: any }> = ({
  user,
  basePosition,
  isCurrentUser,
  timeUniform
}) => {
  const citizenRef = useRef<any>();

  useFrame((state) => {
    if (citizenRef.current) {
      const time = state.clock.elapsedTime;
      
      // –≠—Ñ—Ñ–µ–∫—Ç —Å–∂–∞—Ç–∏—è - —É–º–µ–Ω—å—à–∞–µ–º –º–∞—Å—à—Ç–∞–± –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É
      const distance = Math.sqrt(basePosition[0] ** 2 + basePosition[2] ** 2);
      const compression = 1.0 - smoothstep(0, 20, distance) * 0.5;
      
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –≤–æ–ª–Ω
      const verticalWave = Math.sin(distance * 2.0 - time * 3.0) * 0.3;
      
      // –í—Ä–∞—â–µ–Ω–∏–µ —Å —Å–∏—Å—Ç–µ–º–æ–π (–ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏)
      const angle = Math.atan2(basePosition[2], basePosition[0]) - time * 0.2;
      const radius = distance * compression;
      
      const newX = Math.cos(angle) * radius;
      const newZ = Math.sin(angle) * radius;
      
      citizenRef.current.position.set(
        newX,
        verticalWave + 0.5, // –ü–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–¥ –ø–ª–æ—Å–∫–æ—Å—Ç—å—é
        newZ
      );
      
      // –õ–µ–≥–∫–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
      const pulse = 1 + Math.sin(time * 2 + user.id.length) * 0.1;
      citizenRef.current.scale.setScalar(pulse * compression);
    }
  });

  const smoothstep = (min: number, max: number, value: number) => {
    const x = Math.max(0, Math.min(1, (value - min) / (max - min)));
    return x * x * (3 - 2 * x);
  };

  return (
    <group ref={citizenRef}>
      {/* –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <group position={[0, 0.5, 0]}>
        <mesh>
          <cylinderGeometry args={[0.2, 0.2, 1, 8]} />
          <meshStandardMaterial 
            color={getIntentionColor(user.primaryIntention)}
            emissive={getIntentionColor(user.primaryIntention)}
            emissiveIntensity={0.3}
          />
        </mesh>
        
        {/* –ì–æ–ª–æ–≤–∞ */}
        <mesh position={[0, 0.8, 0]}>
          <sphereGeometry args={[0.3, 8, 8]} />
          <meshStandardMaterial color="#f8c291" />
        </mesh>
      </group>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <Text
        position={[0, 1.8, 0]}
        fontSize={0.4}
        color="white"
        anchorX="center"
        anchorY="middle"
      >
        {user.primaryIntention?.emoji || 'üéØ'}
      </Text>

      <Text
        position={[0, -0.5, 0]}
        fontSize={0.3}
        color={user.honestyScore > 0.8 ? '#4ecdc4' : user.honestyScore > 0.6 ? '#ffd93d' : '#ff6b6b'}
        anchorX="center"
        anchorY="middle"
      >
        {user.name}
      </Text>

      {/* –°–≤–µ—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      {isCurrentUser && (
        <pointLight
          color={getIntentionColor(user.primaryIntention)}
          intensity={0.5}
          distance={2}
        />
      )}
    </group>
  );
};

const PlaneConnection: React.FC<{ start: [number, number, number]; end: [number, number, number]; strength: number; timeUniform: any }> = ({
  start,
  end,
  strength,
  timeUniform
}) => {
  const connectionRef = useRef<any>();

  useFrame((state) => {
    if (connectionRef.current) {
      const time = state.clock.elapsedTime;
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, —á—Ç–æ –∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      const distance1 = Math.sqrt(start[0] ** 2 + start[2] ** 2);
      const distance2 = Math.sqrt(end[0] ** 2 + end[2] ** 2);
      
      const compression1 = 1.0 - smoothstep(0, 20, distance1) * 0.5;
      const compression2 = 1.0 - smoothstep(0, 20, distance2) * 0.5;
      
      const angle1 = Math.atan2(start[2], start[0]) - time * 0.2;
      const angle2 = Math.atan2(end[2], end[0]) - time * 0.2;
      
      const newStart = [
        Math.cos(angle1) * distance1 * compression1,
        Math.sin(distance1 * 2.0 - time * 3.0) * 0.3 + 0.2,
        Math.sin(angle1) * distance1 * compression1
      ];
      
      const newEnd = [
        Math.cos(angle2) * distance2 * compression2,
        Math.sin(distance2 * 2.0 - time * 3.0) * 0.3 + 0.2,
        Math.sin(angle2) * distance2 * compression2
      ];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –ª–∏–Ω–∏–∏
      const points = [
        new THREE.Vector3(...newStart),
        new THREE.Vector3(...newEnd)
      ];
      const geometry = new THREE.BufferGeometry().setFromPoints(points);
      connectionRef.current.geometry.dispose();
      connectionRef.current.geometry = geometry;
    }
  });

  const smoothstep = (min: number, max: number, value: number) => {
    const x = Math.max(0, Math.min(1, (value - min) / (max - min)));
    return x * x * (3 - 2 * x);
  };

  // –ù–∞—á–∞–ª—å–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è
  const initialGeometry = useMemo(() => {
    const points = [
      new THREE.Vector3(...start),
      new THREE.Vector3(...end)
    ];
    return new THREE.BufferGeometry().setFromPoints(points);
  }, [start, end]);

  return (
    <line ref={connectionRef} geometry={initialGeometry}>
      <lineBasicMaterial 
        color="#4ecdc4"
        transparent
        opacity={0.3 + strength * 0.4}
        linewidth={2}
      />
    </line>
  );
};

const CompressionEffects: React.FC<{ timeUniform: any }> = ({ timeUniform }) => {
  const effectsRef = useRef<any>();

  useFrame((state) => {
    if (effectsRef.current) {
      const time = state.clock.elapsedTime;
      effectsRef.current.rotation.y = -time * 0.2;
    }
  });

  return (
    <group ref={effectsRef}>
      {/* –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–ª—å—Ü–∞ —Å–∂–∞—Ç–∏—è */}
      {[5, 10, 15, 20].map((radius, i) => (
        <mesh key={i} rotation={[-Math.PI / 2, 0, 0]} position={[0, 0.1, 0]}>
          <ringGeometry args={[radius - 0.2, radius + 0.2, 64]} />
          <meshBasicMaterial 
            color="#4ecdc4"
            transparent
            opacity={0.1}
            side={THREE.DoubleSide}
          />
        </mesh>
      ))}
    </group>
  );
};

const VerticalWaves: React.FC<{ timeUniform: any }> = ({ timeUniform }) => {
  const wavesRef = useRef<any>();

  useFrame((state) => {
    if (wavesRef.current) {
      const time = state.clock.elapsedTime;
      wavesRef.current.rotation.y = -time * 0.2;
    }
  });

  return (
    <group ref={wavesRef}>
      {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ª–Ω–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã */}
      {Array.from({ length: 8 }).map((_, i) => {
        const angle = (i / 8) * Math.PI * 2;
        const radius = 15 + Math.sin(i) * 5;
        
        return (
          <mesh key={i} rotation={[0, angle, 0]} position={[0, 0, 0]}>
            <cylinderGeometry args={[0.05, 0.05, 3, 8]} />
            <meshBasicMaterial 
              color="#ff6b6b"
              transparent
              opacity={0.2}
            />
          </mesh>
        );
      })}
    </group>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const getIntentionColor = (intention: any): string => {
  const colors: { [key: string]: string } = {
    'learning': '#4ecdc4',
    'collaboration': '#45b7d1', 
    'support': '#96ceb4',
    'creative': '#ff6b6b',
    'social': '#ffd93d',
    'default': '#9d4edd'
  };
  return colors[intention?.type || 'default'];
};

--- src/components/3d/VerticalSystem.tsx ---
import React from 'react';
import { Sphere } from '@react-three/drei';

const VERTICAL_LEVELS = [
  { name: '–°–ù–í2–î–£', position: [0, 4, 0] as [number, number, number], color: '#8B0000' },
  { name: '–í2–î–£', position: [0, 3, 0] as [number, number, number], color: '#D2691E' },
  { name: '–ù–û–†–ú–ê', position: [0, 2, 0] as [number, number, number], color: '#006400' },
  { name: '–ö–í–£', position: [0, 1, 0] as [number, number, number], color: '#00008B' },
  { name: '–ù–í–ó', position: [0, 0, 0] as [number, number, number], color: '#4B0082' },
];

export const VerticalSystem: React.FC = () => {
  return (
    <group>
      {VERTICAL_LEVELS.map((level, index) => (
        <group key={level.name} position={level.position}>
          <Sphere args={[0.3, 32, 32]}>
            <meshStandardMaterial 
              color={level.color}
              transparent 
              opacity={0.8}
              emissive={level.color}
              emissiveIntensity={0.3}
            />
          </Sphere>
          
          {/* –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ */}
          {index < VERTICAL_LEVELS.length - 1 && (
            <mesh position={[0, -0.5, 0]}>
              <cylinderGeometry args={[0.02, 0.02, 1, 8]} />
              <meshStandardMaterial 
                color={level.color}
                transparent 
                opacity={0.6}
              />
            </mesh>
          )}
        </group>
      ))}
      
      {/* –°—Ñ–µ—Ä–∞ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Å–∏–ª—ã (–Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π) */}
      <Sphere position={[0, 5, 0]} args={[0.5, 32, 32]}>
        <meshStandardMaterial 
          color="#ffd700"
          transparent 
          opacity={0.8}
          emissive="#ffd700"
          emissiveIntensity={0.5}
        />
      </Sphere>
    </group>
  );
};

--- src/components/CabinetSystem.tsx ---
import React, { useState } from 'react';
import { useSystemStore } from '../stores/system-store';
import { useRoomStore } from '../stores/room-store';

export const CabinetSystem: React.FC = () => {
  const { currentUser, hasPermission } = useSystemStore();
  const { users, connections } = useRoomStore();
  const [activeTool, setActiveTool] = useState<'analytics' | 'matching' | 'development'>('development');
  
  return (
    <div className="cabinet-system">
      <div className="cabinet-header">
        <h1>üõ∏ –ö–∞–±–∏–Ω–µ—Ç –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –†–∞–∑–≤–∏—Ç–∏—è</h1>
        <p>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π</p>
      </div>
      
      <div className="cabinet-tools">
        <button 
          className={activeTool === 'development' ? 'active' : ''}
          onClick={() => setActiveTool('development')}
        >
          üßò –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –†–∞–∑–≤–∏—Ç–∏–µ
        </button>
        
        {hasPermission('analytics', 'read') && (
          <button 
            className={activeTool === 'analytics' ? 'active' : ''}
            onClick={() => setActiveTool('analytics')}
          >
            üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –°–∏—Å—Ç–µ–º—ã
          </button>
        )}
        
        {hasPermission('matching', 'read') && (
          <button 
            className={activeTool === 'matching' ? 'active' : ''}
            onClick={() => setActiveTool('matching')}
          >
            ü§ù –°–∏—Å—Ç–µ–º–∞ –ú–∞—Ç—á–∏–Ω–≥–∞
          </button>
        )}
      </div>
      
      <div className="tool-content">
        {activeTool === 'development' && <PersonalDevelopmentTool />}
        {activeTool === 'analytics' && <AnalyticsTool />}
        {activeTool === 'matching' && <MatchingTool />}
      </div>
    </div>
  );
};

const PersonalDevelopmentTool: React.FC = () => {
  const { currentUser } = useSystemStore();
  
  return (
    <div className="development-tool">
      <h3>üß† –í–∞—à –ü—É—Ç—å –†–∞–∑–≤–∏—Ç–∏—è</h3>
      
      <div className="development-metrics">
        <div className="metric">
          <label>–£—Ä–æ–≤–µ–Ω—å —á–µ—Å—Ç–Ω–æ—Å—Ç–∏:</label>
          <div className="metric-value">
            <div 
              className="metric-bar" 
              style={{ width: `${currentUser.honestyScore * 100}%` }}
            ></div>
            <span>{Math.round(currentUser.honestyScore * 100)}%</span>
          </div>
        </div>
        
        <div className="metric">
          <label>–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:</label>
          <div className="metric-value">
            <div 
              className="metric-bar" 
              style={{ width: `${(currentUser.trustLevel / 4) * 100}%` }}
            ></div>
            <span>{currentUser.trustLevel}/4</span>
          </div>
        </div>
      </div>
      
      <div className="reflection-zone">
        <h4>üìù –ó–æ–Ω–∞ –†–µ—Ñ–ª–µ–∫—Å–∏–∏</h4>
        <textarea 
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è..."
          rows={6}
        />
        <button className="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é</button>
      </div>
      
      <div className="practice-exercises">
        <h4>üéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –†–∞–∑–≤–∏—Ç–∏—è</h4>
        <div className="exercises-grid">
          <div className="exercise">
            <h5>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏</h5>
            <p>10 –º–∏–Ω—É—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –¥—ã—Ö–∞–Ω–∏–µ–º</p>
            <button>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>
          </div>
          <div className="exercise">
            <h5>–ê–Ω–∞–ª–∏–∑ –ù–∞–º–µ—Ä–µ–Ω–∏–π</h5>
            <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è</p>
            <button>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>
          </div>
          <div className="exercise">
            <h5>–†–∞–∑–≤–∏—Ç–∏–µ –≠–º–ø–∞—Ç–∏–∏</h5>
            <p>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö</p>
            <button>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>
          </div>
        </div>
      </div>
    </div>
  );
};

const AnalyticsTool: React.FC = () => {
  const { users, connections } = useRoomStore();
  const { hasPermission } = useSystemStore();
  
  if (!hasPermission('analytics', 'read')) {
    return <div>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ</div>;
  }
  
  return (
    <div className="analytics-tool">
      <h3>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –°–∏—Å—Ç–µ–º—ã</h3>
      
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-value">{users.length}</div>
          <div className="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω</div>
        </div>
        <div className="stat-card">
          <div className="stat-value">{connections.length}</div>
          <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π</div>
        </div>
        <div className="stat-card">
          <div className="stat-value">
            {users.length > 0 ? Math.round(users.reduce((acc, user) => acc + user.honestyScore, 0) / users.length * 100) : 0}%
          </div>
          <div className="stat-label">–°—Ä–µ–¥–Ω—è—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å</div>
        </div>
      </div>
      
      <div className="users-list">
        <h4>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</h4>
        {users.map(user => (
          <div key={user.id} className="user-analytics">
            <span className="user-name">{user.name}</span>
            <span className="user-stats">
              –ß–µ—Å—Ç–Ω–æ—Å—Ç—å: {Math.round(user.honestyScore * 100)}% | 
              –î–æ–≤–µ—Ä–∏–µ: {user.trustLevel}/4 |
              –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {user.primaryIntention?.emoji || '‚ùì'}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

const MatchingTool: React.FC = () => {
  const { users, connections } = useRoomStore();
  const { hasPermission } = useSystemStore();
  
  if (!hasPermission('matching', 'read')) {
    return <div>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –º–∞—Ç—á–∏–Ω–≥–∞</div>;
  }
  
  const findOptimalMatches = () => {
    // –ê–ª–≥–æ—Ä–∏—Ç–º –º–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –Ø—Ä—ã
    return users
      .filter(user => user.id !== 'yara-001')
      .map(user => ({
        user,
        matchScore: calculateMatchScore(user),
        reasons: ['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏']
      }))
      .sort((a, b) => b.matchScore - a.matchScore);
  };
  
  const optimalMatches = findOptimalMatches();
  
  return (
    <div className="matching-tool">
      <h3>ü§ù –°–∏—Å—Ç–µ–º–∞ –ú–∞—Ç—á–∏–Ω–≥–∞ (ROOT)</h3>
      <p>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞</p>
      
      <div className="matches-list">
        {optimalMatches.map((match, index) => (
          <div key={match.user.id} className="match-card">
            <div className="match-header">
              <span className="match-rank">#{index + 1}</span>
              <span className="user-name">{match.user.name}</span>
              <span className="match-score">{Math.round(match.matchScore * 100)}%</span>
            </div>
            <div className="match-reasons">
              {match.reasons.map((reason, i) => (
                <span key={i} className="reason-tag">‚úì {reason}</span>
              ))}
            </div>
            <div className="match-actions">
              <button className="action-btn">üí¨ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</button>
              <button className="action-btn">üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const calculateMatchScore = (user: any): number => {
  const baseScore = 0.5;
  const honestyBonus = user.honestyScore * 0.3;
  const trustBonus = (user.trustLevel / 4) * 0.2;
  
  return baseScore + honestyBonus + trustBonus;
};

// –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
const cabinetStyles = `
  .cabinet-system {
    height: 100vh;
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    color: white;
    padding: 20px;
    overflow-y: auto;
  }
  
  .cabinet-header {
    text-align: center;
    margin-bottom: 30px;
  }
  
  .cabinet-header h1 {
    color: #4ecdc4;
    margin-bottom: 10px;
  }
  
  .cabinet-tools {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    justify-content: center;
  }
  
  .cabinet-tools button {
    padding: 12px 20px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid #444;
    border-radius: 10px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .cabinet-tools button.active {
    background: rgba(78, 205, 196, 0.2);
    border-color: #4ecdc4;
  }
  
  .cabinet-tools button:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  .tool-content {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 20px;
    min-height: 500px;
  }
  
  .development-metrics {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .metric {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
  }
  
  .metric-value {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 8px;
  }
  
  .metric-bar {
    height: 8px;
    background: linear-gradient(45deg, #4ecdc4, #45b7d1);
    border-radius: 4px;
    transition: width 0.3s ease;
  }
  
  .reflection-zone textarea {
    width: 100%;
    padding: 12px;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid #444;
    border-radius: 8px;
    color: white;
    margin-bottom: 10px;
    resize: vertical;
  }
  
  .save-btn {
    padding: 10px 20px;
    background: #4ecdc4;
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
  }
  
  .exercises-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 15px;
    margin-top: 15px;
  }
  
  .exercise {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
    text-align: center;
  }
  
  .exercise button {
    margin-top: 10px;
    padding: 8px 16px;
    background: #ff6b6b;
    border: none;
    border-radius: 20px;
    color: white;
    cursor: pointer;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
  }
  
  .stat-card {
    background: rgba(255, 255, 255, 0.1);
    padding: 20px;
    border-radius: 10px;
    text-align: center;
  }
  
  .stat-value {
    font-size: 2em;
    color: #4ecdc4;
    font-weight: bold;
  }
  
  .user-analytics {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 6px;
    margin-bottom: 8px;
  }
  
  .match-card {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
    margin-bottom: 15px;
    border-left: 4px solid #4ecdc4;
  }
  
  .match-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .match-score {
    color: #ffd93d;
    font-weight: bold;
  }
  
  .match-reasons {
    margin-bottom: 10px;
  }
  
  .reason-tag {
    background: rgba(78, 205, 196, 0.2);
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
    margin-right: 8px;
  }
  
  .match-actions {
    display: flex;
    gap: 10px;
  }
  
  .action-btn {
    padding: 6px 12px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid #444;
    border-radius: 15px;
    color: white;
    cursor: pointer;
    font-size: 0.8em;
  }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement("style");
styleSheet.innerText = cabinetStyles;
document.head.appendChild(styleSheet);

export default CabinetSystem;

--- src/components/IntegratedDashboard.css ---
/* ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞—é—Ç—Å—è) */

.reality-world {
  height: 100vh;
  background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
  color: white;
  padding: 20px;
}

.world-interface {
  max-width: 1200px;
  margin: 0 auto;
  text-align: center;
}

.world-interface h1 {
  font-size: 2.5em;
  margin-bottom: 20px;
  color: #ffd93d;
}

.world-interface p {
  font-size: 1.2em;
  margin-bottom: 30px;
  color: #ccc;
}

/* –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—è–º–∏ */
.reality-transition {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, #667eea 0%, #764ba2 100%);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
  animation: portalOpen 1.5s ease-in-out;
}

@keyframes portalOpen {
  0% { opacity: 0; transform: scale(0.5); }
  50% { opacity: 1; transform: scale(1.1); }
  100% { opacity: 0; transform: scale(1.5); }
}

--- src/components/IntegratedDashboard.tsx ---
import React, { useEffect } from 'react';
import { useIntegratedSystemStore } from '../stores/integrated-system-store';
import { AIChatInterface } from './ui/AIChatInterface';
import { AnalyticsDashboard } from './ui/AnalyticsDashboard';
import { MultiplayerLobby } from './ui/MultiplayerLobby';
import { GamificationPanel } from './ui/GamificationPanel';
import { RealitySwitcher } from './ui/RealitySwitcher';
import { GoalsInterface } from './ui/GoalsInterface';
import './IntegratedDashboard.css';

export const IntegratedDashboard: React.FC = () => {
  const { 
    initializeSystem, 
    isInitialized,
    currentMode,
    switchMode,
    reality
  } = useIntegratedSystemStore();
  
  useEffect(() => {
    if (!isInitialized) {
      initializeSystem();
    }
  }, [isInitialized, initializeSystem]);
  
  if (!isInitialized) {
    return (
      <div className="loading-screen">
        <div className="loading-content">
          <div className="spiritual-loader"></div>
          <h2>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–∞–±–∏–Ω–µ—Ç–∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†–µ–∞–ª—å–Ω–æ—Å—Ç—å—é...</h2>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ò–ò ü§ñ –°–∏—Å—Ç–µ–º–∞ –¶–µ–ª–µ–π üéØ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –†–µ–∞–ª—å–Ω–æ—Å—Ç–µ–π üåå</p>
        </div>
      </div>
    );
  }
  
  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º "—Ä–µ–∞–ª—å–Ω—ã–π –º–∏—Ä", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  if (reality.currentReality === 'world') {
    return (
      <div className="reality-world">
        <RealitySwitcher />
        <div className="world-interface">
          <h1>üåç –†–µ–∞–ª—å–Ω—ã–π –ú–∏—Ä</h1>
          <p>–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∏—Ä–∞. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.</p>
          <GoalsInterface />
        </div>
      </div>
    );
  }
  
  // –†–µ–∂–∏–º "–∫–∞–±–∏–Ω–µ—Ç"
  return (
    <div className="integrated-dashboard">
      <RealitySwitcher />
      
      <header className="dashboard-header">
        <div className="mode-controls">
          <button 
            className={"mode-btn " + (currentMode === 'yara' ? 'active' : '')}
            onClick={() => switchMode('yara')}
          >
            ü¶Ö –†–µ–∂–∏–º –Ø—Ä—ã
          </button>
          <button 
            className={"mode-btn " + (currentMode === 'terminal' ? 'active' : '')}
            onClick={() => switchMode('terminal')}
          >
            üîÆ –†–µ–∂–∏–º –¢–µ—Ä–º–∏–Ω–∞–ª–∞
          </button>
        </div>
        
        <div className="system-status">
          <span className="status-indicator online"></span>
          <span>–ö–∞–±–∏–Ω–µ—Ç –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –†–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–µ–Ω</span>
        </div>
      </header>
      
      <div className="dashboard-grid">
        
        <div className="column spiritual-practice">
          <div className="module-card">
            <h3>üßò –î—É—Ö–æ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞</h3>
            <div className="practice-zone">
              <p>–¢–µ–∫—É—â–∏–π —Ñ–æ–∫—É—Å: –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ</p>
              <button className="practice-btn">
                –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é
              </button>
            </div>
          </div>
          
          <div className="module-card">
            <h3>ü§ñ –ò–ò-–ü—Å–∏—Ö–æ–ª–æ–≥</h3>
            <AIChatInterface />
          </div>
        </div>
        
        <div className="column analytics">
          <div className="module-card">
            <h3>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è</h3>
            <AnalyticsDashboard />
          </div>
          
          <div className="module-card">
            <h3>üéØ –ú–æ–∏ –¶–µ–ª–∏ –∏ –°—Ç—Ä–µ–º–ª–µ–Ω–∏—è</h3>
            <GoalsInterface />
          </div>
        </div>
        
        <div className="column social-gamification">
          <div className="module-card">
            <h3>üåê –°–æ–æ–±—â–µ—Å—Ç–≤–æ</h3>
            <MultiplayerLobby />
          </div>
          
          <div className="module-card">
            <h3>üéÆ –ü—Ä–æ–≥—Ä–µ—Å—Å</h3>
            <GamificationPanel />
          </div>
        </div>
        
      </div>
      
      <footer className="quick-actions">
        <button className="action-btn">üöÄ –ë—ã—Å—Ç—Ä–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è</button>
        <button className="action-btn">üìà –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å</button>
        <button className="action-btn">üë• –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ</button>
        <button className="action-btn">üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã</button>
      </footer>
    </div>
  );
};

--- src/components/RealitySwitcher.tsx ---
import React from 'react';
import { useSystemStore } from '../stores/system-store';

export const RealitySwitcher: React.FC = () => {
  const { currentMode, switchMode, realityTransition } = useSystemStore();
  
  const handleSwitch = () => {
    switchMode(currentMode === 'cabinet' ? 'room' : 'cabinet');
  };

  const getButtonText = () => {
    if (realityTransition) return 'üåÄ...';
    return currentMode === 'cabinet' ? 'üèôÔ∏è –í–æ–π—Ç–∏ –≤ –ì–æ—Ä–æ–¥' : 'üõ∏ –í –ö–∞–±–∏–Ω–µ—Ç';
  };

  return (
    <div className="reality-switcher">
      <button 
        className={`reality-btn ${currentMode}`}
        onClick={handleSwitch}
        disabled={realityTransition}
        title="Alt+Tab –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
      >
        {getButtonText()}
      </button>
      
      <style>{`
        .reality-switcher {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 1000;
        }
        
        .reality-btn {
          padding: 12px 20px;
          border: none;
          border-radius: 25px;
          color: white;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.3s ease;
          min-width: 160px;
          font-size: 14px;
          backdrop-filter: blur(10px);
        }
        
        .reality-btn.room {
          background: linear-gradient(45deg, #667eea, #764ba2);
        }
        
        .reality-btn.cabinet {
          background: linear-gradient(45deg, #ff6b6b, #ffd93d);
        }
        
        .reality-btn:hover:not(:disabled) {
          transform: translateY(-2px);
          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .reality-btn:disabled {
          opacity: 0.7;
          cursor: not-allowed;
          animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
          0% { opacity: 0.7; }
          50% { opacity: 0.4; }
          100% { opacity: 0.7; }
        }
      `}</style>
    </div>
  );
};

--- src/components/ui/AIChatInterface.css ---
.ai-chat {
  height: 300px;
  display: flex;
  flex-direction: column;
}

.chat-messages {
  flex: 1;
  overflow-y: auto;
  margin-bottom: 10px;
  padding: 10px;
  background: rgba(0, 0, 0, 0.3);
  border-radius: 10px;
}

.message {
  margin-bottom: 10px;
  padding: 8px 12px;
  border-radius: 15px;
  max-width: 80%;
}

.message.user {
  background: #4ecdc4;
  margin-left: auto;
  text-align: right;
}

.message.assistant {
  background: #6c757d;
  margin-right: auto;
}

.message-content {
  margin-bottom: 4px;
}

.message-time {
  font-size: 0.7em;
  opacity: 0.7;
}

.chat-input {
  display: flex;
  gap: 8px;
}

.chat-input input {
  flex: 1;
  padding: 8px 12px;
  border: 1px solid #444;
  border-radius: 20px;
  background: rgba(255, 255, 255, 0.1);
  color: white;
}

.chat-input button {
  padding: 8px 16px;
  border: none;
  border-radius: 20px;
  background: #4ecdc4;
  color: white;
  cursor: pointer;
}

--- src/components/ui/AIChatInterface.tsx ---
import React, { useState } from 'react';
import { useIntegratedSystemStore } from '../../stores/integrated-system-store';

export const AIChatInterface: React.FC = () => {
  const [message, setMessage] = useState('');
  const { ai, sendAIMessage, processAIMessageWithKnowledge } = useIntegratedSystemStore();
  
  const handleSend = async () => {
    if (message.trim()) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
      const aiResponse = await processAIMessageWithKnowledge(message);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage = {
        role: 'user' as const,
        content: message,
        timestamp: new Date()
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
      const assistantMessage = {
        role: 'assistant' as const,
        content: aiResponse,
        timestamp: new Date()
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      sendAIMessage(message); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ–±—ã—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
      
      setMessage('');
    }
  };

  const quickQuestions = [
    "–ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–º—ã—Å–ª –∂–∏–∑–Ω–∏?",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ?",
    "–ö–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä–µ–≤–æ–≥–æ–π?",
    "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è –æ —Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è—Ö?",
    "–ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ?"
  ];

  return (
    <div className="ai-chat">
      <div className="chat-header">
        <h3>üß† –ò–ò-–ü—Å–∏—Ö–æ–ª–æ–≥ (–§—Ä–µ–π–¥, –Æ–Ω–≥, –§—Ä–∞–Ω–∫–ª)</h3>
        <div className="knowledge-indicator">
          –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è 18-20 –≤–µ–∫–∞
        </div>
      </div>
      
      <div className="quick-questions">
        <h4>–ë—ã—Å—Ç—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</h4>
        <div className="questions-grid">
          {quickQuestions.map((question, index) => (
            <button
              key={index}
              className="quick-question-btn"
              onClick={() => setMessage(question)}
            >
              {question}
            </button>
          ))}
        </div>
      </div>
      
      <div className="chat-messages">
        {ai.conversation.map((msg, index) => (
          <div key={index} className={`message ${msg.role}`}>
            <div className="message-content">{msg.content}</div>
            <div className="message-time">
              {msg.timestamp.toLocaleTimeString()}
            </div>
          </div>
        ))}
      </div>
      
      <div className="chat-input">
        <input
          type="text"
          value={message}
          onChange={(e) => setMessage(e.target.value)}
          placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏, —Å–º—ã—Å–ª–µ –∂–∏–∑–Ω–∏..."
          onKeyPress={(e) => e.key === 'Enter' && handleSend()}
        />
        <button onClick={handleSend}>üì®</button>
      </div>
      
      <style>{`
        .ai-chat {
          height: 400px;
          display: flex;
          flex-direction: column;
        }
        
        .chat-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 10px;
        }
        
        .chat-header h3 {
          margin: 0;
          color: #4ecdc4;
        }
        
        .knowledge-indicator {
          font-size: 0.8em;
          background: rgba(255, 215, 0, 0.2);
          padding: 4px 8px;
          border-radius: 12px;
          border: 1px solid gold;
        }
        
        .quick-questions {
          margin-bottom: 10px;
        }
        
        .quick-questions h4 {
          margin: 0 0 8px 0;
          color: #ffd93d;
          font-size: 0.9em;
        }
        
        .questions-grid {
          display: grid;
          grid-template-columns: 1fr;
          gap: 5px;
        }
        
        .quick-question-btn {
          padding: 6px 10px;
          background: rgba(255, 255, 255, 0.1);
          border: 1px solid #444;
          border-radius: 15px;
          color: white;
          font-size: 0.8em;
          cursor: pointer;
          text-align: left;
          transition: all 0.3s ease;
        }
        
        .quick-question-btn:hover {
          background: rgba(78, 205, 196, 0.2);
          border-color: #4ecdc4;
        }
        
        .chat-messages {
          flex: 1;
          overflow-y: auto;
          margin-bottom: 10px;
          padding: 10px;
          background: rgba(0, 0, 0, 0.3);
          border-radius: 10px;
        }
        
        .message {
          margin-bottom: 10px;
          padding: 8px 12px;
          border-radius: 15px;
          max-width: 80%;
        }
        
        .message.user {
          background: #4ecdc4;
          margin-left: auto;
          text-align: right;
        }
        
        .message.assistant {
          background: #6c757d;
          margin-right: auto;
          border-left: 3px solid #ffd93d;
        }
        
        .message-content {
          margin-bottom: 4px;
          white-space: pre-wrap;
        }
        
        .message-time {
          font-size: 0.7em;
          opacity: 0.7;
        }
        
        .chat-input {
          display: flex;
          gap: 8px;
        }
        
        .chat-input input {
          flex: 1;
          padding: 8px 12px;
          border: 1px solid #444;
          border-radius: 20px;
          background: rgba(255, 255, 255, 0.1);
          color: white;
        }
        
        .chat-input button {
          padding: 8px 16px;
          border: none;
          border-radius: 20px;
          background: #4ecdc4;
          color: white;
          cursor: pointer;
        }
      `}</style>
    </div>
  );
};

--- src/components/ui/AnalyticsDashboard.tsx ---
import React from 'react';
import { useIntegratedSystemStore } from '../../stores/integrated-system-store';

export const AnalyticsDashboard: React.FC = () => {
  const { analytics } = useIntegratedSystemStore();
  
  const MetricBar: React.FC<{ label: string; value: number; color: string }> = ({ label, value, color }) => (
    <div className="metric-bar">
      <div className="metric-label">{label}</div>
      <div className="metric-track">
        <div 
          className="metric-fill" 
          style={{ 
            width: `${value * 100}%`,
            backgroundColor: color
          }}
        />
        <div className="metric-value">{Math.round(value * 100)}%</div>
      </div>
    </div>
  );
  
  return (
    <div className="analytics-dash">
      <div className="metrics-section">
        <h4>–ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è</h4>
        <MetricBar label="–ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏–∫–∏" value={analytics.userMetrics.practiceConsistency} color="#4ecdc4" />
        <MetricBar label="–°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞" value={analytics.userMetrics.growthVelocity} color="#45b7d1" />
        <MetricBar label="–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤" value={analytics.userMetrics.patternStability} color="#ff6b6b" />
        <MetricBar label="–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π" value={analytics.userMetrics.milestoneFrequency} color="#96ceb4" />
      </div>
      
      <div className="insights-section">
        <h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–Ω—Å–∞–π—Ç—ã</h4>
        {analytics.insights.slice(0, 2).map(insight => (
          <div key={insight.id} className="insight">
            <strong>{insight.title}</strong>
            <p>{insight.description}</p>
          </div>
        ))}
      </div>
      
      <style>{`
        .analytics-dash {
          height: 100%;
          display: flex;
          flex-direction: column;
          gap: 15px;
        }
        
        .metrics-section h4,
        .insights-section h4 {
          margin: 0 0 10px 0;
          color: #4ecdc4;
          font-size: 0.9em;
        }
        
        .metric-bar {
          margin-bottom: 10px;
        }
        
        .metric-label {
          font-size: 0.8em;
          margin-bottom: 4px;
          color: #ccc;
        }
        
        .metric-track {
          height: 8px;
          background: #333;
          border-radius: 4px;
          position: relative;
        }
        
        .metric-fill {
          height: 100%;
          border-radius: 4px;
          transition: width 0.3s ease;
        }
        
        .metric-value {
          position: absolute;
          right: -30px;
          top: -2px;
          font-size: 0.7em;
          color: #ccc;
        }
        
        .insight {
          background: rgba(255, 107, 107, 0.1);
          border-left: 2px solid #ff6b6b;
          padding: 8px;
          margin-bottom: 8px;
          border-radius: 0 4px 4px 0;
        }
        
        .insight strong {
          font-size: 0.8em;
          color: #ff6b6b;
        }
        
        .insight p {
          font-size: 0.7em;
          margin: 4px 0 0 0;
          color: #ccc;
        }
      `}</style>
    </div>
  );
};

--- src/components/ui/GamificationPanel.tsx ---
import React from 'react';
import { useIntegratedSystemStore } from '../../stores/integrated-system-store';

export const GamificationPanel: React.FC = () => {
  const { gamification, completeQuest } = useIntegratedSystemStore();
  
  return (
    <div className="gamification-panel">
      <div className="level-info">
        <div className="level">–£—Ä–æ–≤–µ–Ω—å {gamification.level}</div>
        <div className="xp">
          –û–ø—ã—Ç: {gamification.experience} / {gamification.level * 500}
        </div>
      </div>
      
      <div className="active-quests">
        <h4>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã</h4>
        {gamification.activeQuests.map(quest => (
          <div key={quest.id} className="quest">
            <div className="quest-info">
              <strong>{quest.name}</strong>
              <p>{quest.description}</p>
              <div className="quest-progress">
                –ü—Ä–æ–≥—Ä–µ—Å—Å: {quest.objectives[0].current}/{quest.objectives[0].target}
              </div>
            </div>
            <button 
              className="complete-btn"
              onClick={() => completeQuest(quest.id)}
            >
              –ó–∞–≤–µ—Ä—à–∏—Ç—å
            </button>
          </div>
        ))}
      </div>
      
      <div className="achievements">
        <h4>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h4>
        <div className="achievements-grid">
          {gamification.achievements.map(achievement => (
            <div 
              key={achievement.id} 
              className={"achievement " + (achievement.unlocked ? "unlocked" : "locked")}
              title={achievement.description}
            >
              <span className="achievement-icon">{achievement.icon}</span>
              <span className="achievement-name">{achievement.name}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

--- src/components/ui/GoalsInterface.tsx ---
import React, { useState } from 'react';
import { useIntegratedSystemStore } from '../../stores/integrated-system-store';

interface GoalCategory {
  id: string;
  name: string;
  icon: string;
  color: string;
}

export const GoalsInterface: React.FC = () => {
  const [activeCategory, setActiveCategory] = useState<string>('spiritual');
  const [goalText, setGoalText] = useState('');
  const { setUserGoals } = useIntegratedSystemStore();
  
  const categories: GoalCategory[] = [
    { id: 'spiritual', name: '–î—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ', icon: 'üßò', color: '#4ecdc4' },
    { id: 'personal', name: '–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç', icon: 'üåü', color: '#ffd93d' },
    { id: 'professional', name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏', icon: 'üíº', color: '#6c5ce7' },
    { id: 'health', name: '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ', icon: '‚ù§Ô∏è', color: '#ff6b6b' },
    { id: 'relationships', name: '–û—Ç–Ω–æ—à–µ–Ω–∏—è', icon: 'üë•', color: '#a29bfe' },
    { id: 'creative', name: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', icon: 'üé®', color: '#fd79a8' }
  ];
  
  const handleAddGoal = () => {
    if (goalText.trim()) {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–∏
      const newGoal = {
        id: Date.now().toString(),
        text: goalText,
        category: activeCategory,
        createdAt: new Date(),
        completed: false
      };
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
      const existingGoals = JSON.parse(localStorage.getItem('userGoals') || '[]');
      const updatedGoals = [...existingGoals, newGoal];
      localStorage.setItem('userGoals', JSON.stringify(updatedGoals));
      
      setGoalText('');
      alert('–¶–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –≤ –µ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏.');
    }
  };
  
  return (
    <div className="goals-interface">
      <div className="goals-header">
        <h2>üéØ –ö–∞—Ä—Ç–∞ –ú–æ–∏—Ö –°—Ç—Ä–µ–º–ª–µ–Ω–∏–π</h2>
        <p>–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ü–µ–ª–∏ - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–∂–µ—Ç –∏—Ö –¥–æ—Å—Ç–∏—á—å</p>
      </div>
      
      <div className="categories-grid">
        {categories.map(category => (
          <div 
            key={category.id}
            className={`category-card ${activeCategory === category.id ? 'active' : ''}`}
            style={{ borderColor: category.color }}
            onClick={() => setActiveCategory(category.id)}
          >
            <span className="category-icon">{category.icon}</span>
            <span className="category-name">{category.name}</span>
          </div>
        ))}
      </div>
      
      <div className="goal-input-section">
        <div className="selected-category">
          –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {categories.find(c => c.id === activeCategory)?.name}
        </div>
        
        <textarea
          className="goal-textarea"
          value={goalText}
          onChange={(e) => setGoalText(e.target.value)}
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –ø–æ–¥—Ä–æ–±–Ω–æ... –ù–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ 20 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å'"
          rows={4}
        />
        
        <button 
          className="add-goal-btn"
          onClick={handleAddGoal}
          disabled={!goalText.trim()}
        >
          üéØ –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º—É
        </button>
      </div>
      
      <div className="goals-preview">
        <h4>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:</h4>
        <div className="goals-list">
          {/* –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–π –∏–∑ localStorage */}
          <div className="empty-state">
            –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ü–µ–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–∏—Å—Ç–µ–º–æ–π
          </div>
        </div>
      </div>
      
      <style>{`
        .goals-interface {
          background: rgba(255, 255, 255, 0.1);
          backdrop-filter: blur(10px);
          border-radius: 15px;
          padding: 20px;
          margin: 20px;
          border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .goals-header {
          text-align: center;
          margin-bottom: 20px;
        }
        
        .goals-header h2 {
          color: #4ecdc4;
          margin-bottom: 8px;
        }
        
        .categories-grid {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 10px;
          margin-bottom: 20px;
        }
        
        .category-card {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 15px;
          background: rgba(255, 255, 255, 0.05);
          border: 2px solid transparent;
          border-radius: 10px;
          cursor: pointer;
          transition: all 0.3s ease;
        }
        
        .category-card:hover {
          background: rgba(255, 255, 255, 0.1);
          transform: translateY(-2px);
        }
        
        .category-card.active {
          background: rgba(255, 255, 255, 0.15);
          border-color: inherit;
        }
        
        .category-icon {
          font-size: 2em;
          margin-bottom: 8px;
        }
        
        .category-name {
          font-size: 0.8em;
          text-align: center;
        }
        
        .goal-input-section {
          margin-bottom: 20px;
        }
        
        .selected-category {
          margin-bottom: 10px;
          color: #4ecdc4;
          font-weight: bold;
        }
        
        .goal-textarea {
          width: 100%;
          padding: 12px;
          background: rgba(0, 0, 0, 0.3);
          border: 1px solid #444;
          border-radius: 8px;
          color: white;
          font-family: inherit;
          resize: vertical;
        }
        
        .goal-textarea:focus {
          outline: none;
          border-color: #4ecdc4;
        }
        
        .add-goal-btn {
          width: 100%;
          padding: 12px;
          background: linear-gradient(45deg, #4ecdc4, #44a08d);
          border: none;
          border-radius: 8px;
          color: white;
          font-weight: bold;
          cursor: pointer;
          margin-top: 10px;
          transition: transform 0.3s ease;
        }
        
        .add-goal-btn:hover:not(:disabled) {
          transform: translateY(-2px);
        }
        
        .add-goal-btn:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }
        
        .goals-preview h4 {
          color: #ffd93d;
          margin-bottom: 10px;
        }
        
        .empty-state {
          text-align: center;
          padding: 20px;
          background: rgba(255, 255, 255, 0.05);
          border-radius: 8px;
          color: #888;
        }
      `}</style>
    </div>
  );
};

--- src/components/ui/MultiplayerLobby.tsx ---
import React from 'react';
import { useIntegratedSystemStore } from '../../stores/integrated-system-store';

export const MultiplayerLobby: React.FC = () => {
  const { multiplayer, joinMultiplayerSession } = useIntegratedSystemStore();
  
  return (
    <div className="multiplayer-lobby">
      <div className="online-users">
        <h4>–û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({multiplayer.connectedUsers.length})</h4>
        {multiplayer.connectedUsers.map(user => (
          <div key={user.id} className="user-card">
            <div className="user-info">
              <span className="user-name">{user.name}</span>
              <span className="user-level">–£—Ä. {user.spiritualLevel}</span>
            </div>
            <span className="user-activity">{user.currentActivity}</span>
          </div>
        ))}
      </div>
      
      <div className="group-activities">
        <h4>–ì—Ä—É–ø–ø–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h4>
        {multiplayer.groupActivities.map(activity => (
          <div key={activity.id} className="activity">
            <div className="activity-info">
              <strong>{activity.name}</strong>
              <span>{activity.participants}/{activity.maxParticipants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
            </div>
            <button 
              className="join-btn"
              onClick={() => joinMultiplayerSession(activity.id)}
            >
              –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
            </button>
          </div>
        ))}
      </div>
      
      <style>{`
        .multiplayer-lobby {
          height: 300px;
          display: flex;
          flex-direction: column;
          gap: 15px;
        }
        
        .online-users h4,
        .group-activities h4 {
          margin: 0 0 10px 0;
          color: #4ecdc4;
          font-size: 0.9em;
        }
        
        .user-card {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 6px 8px;
          background: rgba(255, 255, 255, 0.05);
          border-radius: 6px;
          margin-bottom: 5px;
        }
        
        .user-info {
          display: flex;
          gap: 8px;
          align-items: center;
        }
        
        .user-name {
          font-size: 0.8em;
        }
        
        .user-level {
          font-size: 0.7em;
          color: #ff6b6b;
        }
        
        .user-activity {
          font-size: 0.7em;
          color: #96ceb4;
        }
        
        .activity {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px;
          background: rgba(255, 255, 255, 0.05);
          border-radius: 6px;
          margin-bottom: 8px;
        }
        
        .activity-info {
          display: flex;
          flex-direction: column;
        }
        
        .activity-info strong {
          font-size: 0.8em;
        }
        
        .activity-info span {
          font-size: 0.7em;
          color: #ccc;
        }
        
        .join-btn {
          padding: 4px 8px;
          background: #4ecdc4;
          border: none;
          border-radius: 12px;
          color: white;
          font-size: 0.7em;
          cursor: pointer;
        }
        
        .join-btn:hover {
          background: #45b7d1;
        }
      `}</style>
    </div>
  );
};

--- src/components/ui/RealitySwitcher.tsx ---
import React from 'react';
import { useIntegratedSystemStore } from '../../stores/integrated-system-store';

export const RealitySwitcher: React.FC = () => {
  const { reality, toggleReality } = useIntegratedSystemStore();
  
  return (
    <div className="reality-switcher">
      <button 
        className={`reality-btn ${reality.currentReality === 'cabinet' ? 'active' : ''}`}
        onClick={toggleReality}
        disabled={reality.realityTransition}
      >
        {reality.realityTransition ? (
          <div className="transition-effect">
            <div className="portal-animation"></div>
            <span>–ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—è–º–∏...</span>
          </div>
        ) : (
          <>
            {reality.currentReality === 'cabinet' ? 'üåå –í–æ–π—Ç–∏ –≤ –†–µ–∞–ª—å–Ω—ã–π –ú–∏—Ä' : 'üõ∏ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ö–∞–±–∏–Ω–µ—Ç'}
          </>
        )}
      </button>
      
      <style>{`
        .reality-switcher {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 1000;
        }
        
        .reality-btn {
          padding: 12px 20px;
          background: linear-gradient(45deg, #667eea, #764ba2);
          border: none;
          border-radius: 25px;
          color: white;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.3s ease;
          min-width: 200px;
        }
        
        .reality-btn:hover:not(:disabled) {
          transform: translateY(-2px);
          box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }
        
        .reality-btn.active {
          background: linear-gradient(45deg, #ff6b6b, #ffd93d);
        }
        
        .transition-effect {
          display: flex;
          align-items: center;
          gap: 10px;
        }
        
        .portal-animation {
          width: 20px;
          height: 20px;
          border: 2px solid white;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

--- src/components/ui/UserInterface.tsx ---
import React, { useState } from 'react';
import { useRoomStore } from '../../stores/room-store';
import { useSystemStore } from '../../stores/system-store';

export const UserInterface: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'intentions' | 'connections' | 'profile'>('intentions');
  const { currentUser, intentionsCatalog, setUserIntention, connections, users } = useRoomStore();
  const { hasPermission } = useSystemStore();
  
  return (
    <div className="user-interface">
      <div className="ui-header">
        <h2>üß† –ö–æ–º–Ω–∞—Ç–∞ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π</h2>
        <p>–í—ã—Ä–∞–∂–∞–π—Ç–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤</p>
      </div>
      
      <div className="tabs">
        <button 
          className={activeTab === 'intentions' ? 'active' : ''}
          onClick={() => setActiveTab('intentions')}
        >
          üéØ –ú–æ–∏ –ù–∞–º–µ—Ä–µ–Ω–∏—è
        </button>
        <button 
          className={activeTab === 'connections' ? 'active' : ''}
          onClick={() => setActiveTab('connections')}
        >
          üîó –°–≤—è–∑–∏ ({connections.length})
        </button>
        <button 
          className={activeTab === 'profile' ? 'active' : ''}
          onClick={() => setActiveTab('profile')}
        >
          üë§ –ü—Ä–æ—Ñ–∏–ª—å
        </button>
      </div>
      
      <div className="tab-content">
        {activeTab === 'intentions' && <IntentionsTab />}
        {activeTab === 'connections' && <ConnectionsTab />}
        {activeTab === 'profile' && <ProfileTab />}
      </div>
    </div>
  );
};

const IntentionsTab: React.FC = () => {
  const { currentUser, intentionsCatalog, setUserIntention } = useRoomStore();
  
  const handleSetIntention = (intention: any) => {
    setUserIntention({
      ...intention,
      priority: 1,
      createdAt: new Date()
    });
  };
  
  return (
    <div className="intentions-tab">
      <div className="current-intention">
        <h4>–¢–µ–∫—É—â–µ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ:</h4>
        {currentUser.primaryIntention ? (
          <div className="primary-intention">
            <span className="intention-emoji">{currentUser.primaryIntention.emoji}</span>
            <span className="intention-text">{currentUser.primaryIntention.description}</span>
          </div>
        ) : (
          <p className="no-intention">–ù–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ</p>
        )}
      </div>
      
      <div className="intentions-grid">
        <h4>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ:</h4>
        <div className="intentions-list">
          {intentionsCatalog.map(intention => (
            <button
              key={intention.id}
              className={`intention-btn ${
                currentUser.primaryIntention?.id === intention.id ? 'active' : ''
              }`}
              onClick={() => handleSetIntention(intention)}
            >
              <span className="intention-emoji">{intention.emoji}</span>
              <span className="intention-desc">{intention.description}</span>
            </button>
          ))}
        </div>
      </div>
      
      <style>{`
        .intentions-tab {
          padding: 15px;
        }
        
        .current-intention {
          margin-bottom: 20px;
          padding: 15px;
          background: rgba(255, 255, 255, 0.1);
          border-radius: 10px;
        }
        
        .primary-intention {
          display: flex;
          align-items: center;
          gap: 10px;
          font-size: 1.1em;
          color: #4ecdc4;
        }
        
        .no-intention {
          color: #888;
          font-style: italic;
        }
        
        .intentions-list {
          display: grid;
          grid-template-columns: 1fr;
          gap: 8px;
        }
        
        .intention-btn {
          display: flex;
          align-items: center;
          gap: 10px;
          padding: 12px;
          background: rgba(255, 255, 255, 0.05);
          border: 1px solid #444;
          border-radius: 8px;
          color: white;
          cursor: pointer;
          transition: all 0.3s ease;
        }
        
        .intention-btn:hover {
          background: rgba(255, 255, 255, 0.1);
          border-color: #4ecdc4;
        }
        
        .intention-btn.active {
          background: rgba(78, 205, 196, 0.2);
          border-color: #4ecdc4;
        }
        
        .intention-emoji {
          font-size: 1.2em;
        }
      `}</style>
    </div>
  );
};

const ConnectionsTab: React.FC = () => {
  const { connections, users } = useRoomStore();
  
  return (
    <div className="connections-tab">
      <h4>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–≤—è–∑–∏:</h4>
      
      {connections.length === 0 ? (
        <p className="no-connections">
          –ü–æ–∫–∞ –Ω–µ—Ç —Å–≤—è–∑–µ–π. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!
        </p>
      ) : (
        <div className="connections-list">
          {connections.map(connection => {
            const otherUser = users.find(u => 
              u.id === (connection.userId1 === 'user-1' ? connection.userId2 : connection.userId1)
            );
            
            if (!otherUser) return null;
            
            return (
              <div key={connection.id} className="connection-item">
                <div className="connection-header">
                  <span className="user-name">{otherUser.name}</span>
                  <span className="connection-strength">
                    –°–∏–ª–∞ —Å–≤—è–∑–∏: {Math.round(connection.strength * 100)}%
                  </span>
                </div>
                <div className="shared-intention">
                  –û–±—â–µ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {otherUser.primaryIntention?.emoji} {otherUser.primaryIntention?.description}
                </div>
                <div className="connection-actions">
                  <button className="action-btn">üí¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥</button>
                  <button className="action-btn">ü§ù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</button>
                </div>
              </div>
            );
          })}
        </div>
      )}
      
      <style>{`
        .connections-tab {
          padding: 15px;
        }
        
        .no-connections {
          text-align: center;
          padding: 20px;
          color: #888;
          font-style: italic;
        }
        
        .connection-item {
          background: rgba(255, 255, 255, 0.05);
          border-radius: 8px;
          padding: 12px;
          margin-bottom: 10px;
          border-left: 3px solid #4ecdc4;
        }
        
        .connection-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 8px;
        }
        
        .user-name {
          font-weight: bold;
          color: #4ecdc4;
        }
        
        .connection-strength {
          font-size: 0.8em;
          color: #ffd93d;
        }
        
        .shared-intention {
          margin-bottom: 10px;
          color: #ccc;
        }
        
        .connection-actions {
          display: flex;
          gap: 8px;
        }
        
        .action-btn {
          padding: 6px 12px;
          background: rgba(78, 205, 196, 0.2);
          border: 1px solid #4ecdc4;
          border-radius: 15px;
          color: white;
          font-size: 0.8em;
          cursor: pointer;
        }
        
        .action-btn:hover {
          background: rgba(78, 205, 196, 0.3);
        }
      `}</style>
    </div>
  );
};

const ProfileTab: React.FC = () => {
  const { currentUser } = useRoomStore();
  
  return (
    <div className="profile-tab">
      <div className="profile-info">
        <h4>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</h4>
        <div className="profile-field">
          <label>–ò–º—è:</label>
          <span>{currentUser.name}</span>
        </div>
        <div className="profile-field">
          <label>–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:</label>
          <span>{currentUser.trustLevel}/4</span>
        </div>
        <div className="profile-field">
          <label>–≠–Ω–µ—Ä–≥–∏—è:</label>
          <span>{Math.round(currentUser.energy * 100)}%</span>
        </div>
      </div>
      
      <div className="trust-indicators">
        <h4>üí´ –£—Ä–æ–≤–Ω–∏ –¥–æ–≤–µ—Ä–∏—è:</h4>
        <div className="trust-levels">
          <div className="trust-level">
            <span className="level">1–º</span>
            <span className="desc">–õ–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</span>
          </div>
          <div className="trust-level">
            <span className="level">2–º</span>
            <span className="desc">–ë–ª–∏–∑–∫–æ–µ –æ–±—â–µ–Ω–∏–µ</span>
          </div>
          <div className="trust-level">
            <span className="level">3–º</span>
            <span className="desc">–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è</span>
          </div>
          <div className="trust-level">
            <span className="level">4–º</span>
            <span className="desc">–ü—É–±–ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ</span>
          </div>
        </div>
      </div>
      
      <style>{`
        .profile-tab {
          padding: 15px;
        }
        
        .profile-info {
          margin-bottom: 20px;
        }
        
        .profile-field {
          display: flex;
          justify-content: space-between;
          padding: 8px 0;
          border-bottom: 1px solid #333;
        }
        
        .trust-levels {
          display: grid;
          grid-template-columns: 1fr 1fr;
          gap: 10px;
        }
        
        .trust-level {
          display: flex;
          flex-direction: column;
          align-items: center;
          padding: 10px;
          background: rgba(255, 255, 255, 0.05);
          border-radius: 8px;
        }
        
        .trust-level .level {
          font-weight: bold;
          color: #4ecdc4;
        }
        
        .trust-level .desc {
          font-size: 0.8em;
          color: #ccc;
          text-align: center;
        }
      `}</style>
    </div>
  );
};

--- src/index.css ---
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: #0f0f23;
  color: white;
  overflow: hidden;
}

#root {
  height: 100vh;
}

--- src/main.tsx ---
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

--- src/stores/integrated-system-store.ts ---
import { create } from 'zustand';

// ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –æ—Å—Ç–∞—é—Ç—Å—è)

interface RealityState {
  currentReality: 'cabinet' | 'world';
  realityTransition: boolean;
}

interface ExtendedSystemState extends IntegratedSystemState {
  reality: RealityState;
  toggleReality: () => void;
  setUserGoals: (goals: UserGoals) => void;
  processAIMessageWithKnowledge: (message: string) => Promise<string>;
}

export const useIntegratedSystemStore = create<ExtendedSystemState>((set, get) => ({
  // ... (–ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
  
  reality: {
    currentReality: 'cabinet',
    realityTransition: false
  },
  
  toggleReality: () => {
    set({ reality: { ...get().reality, realityTransition: true } });
    
    setTimeout(() => {
      const newReality = get().reality.currentReality === 'cabinet' ? 'world' : 'cabinet';
      set({ 
        reality: { 
          currentReality: newReality,
          realityTransition: false 
        } 
      });
    }, 1500);
  },
  
  setUserGoals: (goals: UserGoals) => {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    localStorage.setItem('userGoals', JSON.stringify(goals));
    set({ user: { ...get().user, goals } });
  },
  
  processAIMessageWithKnowledge: async (message: string): Promise<string> => {
    // –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤
    const knowledgeBase = {
      freud: {
        concepts: ['–±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ', '–ª–∏–±–∏–¥–æ', '—ç–¥–∏–ø–æ–≤ –∫–æ–º–ø–ª–µ–∫—Å', '—Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è', '–≤—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ'],
        quotes: [
          '¬´–°–Ω–æ–≤–∏–¥–µ–Ω–∏–µ ‚Äî –∫–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –¥–æ—Ä–æ–≥–∞ –≤ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ¬ª',
          '¬´–¢–∞–º, –≥–¥–µ –±—ã–ª–æ –û–Ω–æ, –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å –Ø¬ª',
          '¬´–ü–µ—Ä–≤—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ—Å–∏–ª —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤–º–µ—Å—Ç–æ –∫–∞–º–Ω—è, –±—ã–ª –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏¬ª'
        ]
      },
      jung: {
        concepts: ['–∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ', '–∞—Ä—Ö–µ—Ç–∏–ø—ã', '–∞–Ω–∏–º–∞/–∞–Ω–∏–º—É—Å', '—Ç–µ–Ω—å', '—Å–∞–º–æ—Å—Ç—å'],
        quotes: [
          '¬´–í—Å—Ç—Ä–µ—á–∞ –¥–≤—É—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π –ø–æ–¥–æ–±–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–≤—É—Ö —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö –≤–µ—â–µ—Å—Ç–≤: –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—å –º–∞–ª–µ–π—à–∞—è —Ä–µ–∞–∫—Ü–∏—è, –∏–∑–º–µ–Ω—è—é—Ç—Å—è –æ–±–∞¬ª',
          '¬´–Ø –Ω–µ —Ç–æ, —á—Ç–æ —Å–æ –º–Ω–æ–π —Å–ª—É—á–∏–ª–æ—Å—å, —è —Ç–æ, —á–µ–º —è —Ä–µ—à–∏–ª —Å—Ç–∞—Ç—å¬ª',
          '¬´–í–∞—à–µ –≤–∏–¥–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç —è—Å–Ω—ã–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ¬ª'
        ]
      },
      frankl: {
        concepts: ['–ª–æ–≥–æ—Ç–µ—Ä–∞–ø–∏—è', '—Å–º—ã—Å–ª –∂–∏–∑–Ω–∏', '—ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–∞–∫—É—É–º', '—Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏–π –æ–ø—Ç–∏–º–∏–∑–º'],
        quotes: [
          '¬´–£ —á–µ–ª–æ–≤–µ–∫–∞ –º–æ–∂–Ω–æ –æ—Ç–Ω—è—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ: –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–æ–±–æ–¥—ã —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –≤—ã–±–∏—Ä–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –ª—é–±—ã–º –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞–º¬ª',
          '¬´–°—Ç—Ä–∞–¥–∞–Ω–∏–µ –ø–µ—Ä–µ—Å—Ç–∞–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–∞–¥–∞–Ω–∏–µ–º –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –æ–Ω–æ –æ–±—Ä–µ—Ç–∞–µ—Ç —Å–º—ã—Å–ª¬ª'
        ]
      },
      // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤ –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤...
    };
    
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥–±–æ—Ä –æ—Ç–≤–µ—Ç–∞
    const lowerMessage = message.toLowerCase();
    let response = "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –≥–ª—É–±–∏–Ω–Ω–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏...\n\n";
    
    // –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –ø–æ–¥–±–æ—Ä —Ü–∏—Ç–∞—Ç
    if (lowerMessage.includes('—Å–º—ã—Å–ª') || lowerMessage.includes('—Ü–µ–ª—å')) {
      response += knowledgeBase.frankl.quotes[0] + " - –í–∏–∫—Ç–æ—Ä –§—Ä–∞–Ω–∫–ª\n\n";
    }
    
    if (lowerMessage.includes('–±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ') || lowerMessage.includes('—Å–Ω—ã')) {
      response += knowledgeBase.freud.quotes[0] + " - –ó–∏–≥–º—É–Ω–¥ –§—Ä–µ–π–¥\n\n";
    }
    
    if (lowerMessage.includes('–ª–∏—á–Ω–æ—Å—Ç—å') || lowerMessage.includes('–∏–∑–º–µ–Ω–µ–Ω–∏–µ')) {
      response += knowledgeBase.jung.quotes[0] + " - –ö–∞—Ä–ª –ì—É—Å—Ç–∞–≤ –Æ–Ω–≥\n\n";
    }
    
    response += "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—Ç: –§—Ä–µ–π–¥, –Æ–Ω–≥, –§—Ä–∞–Ω–∫–ª, –ê–¥–ª–µ—Ä, –§—Ä–æ–º–º, –ú–∞—Å–ª–æ—É, –†–æ–¥–∂–µ—Ä—Å";
    
    return response;
  }
}));

--- src/stores/room-store.ts ---
import { create } from 'zustand';

interface User {
  id: string;
  name: string;
  position: [number, number, number];
  intentions: UserIntention[];
  primaryIntention: UserIntention | null;
  trustLevel: number;
  energy: number;
  honestyScore: number;
}

interface UserIntention {
  id: string;
  type: 'learning' | 'collaboration' | 'support' | 'creative' | 'social';
  description: string;
  emoji: string;
  priority: number;
  createdAt: Date;
}

interface Connection {
  id: string;
  userId1: string;
  userId2: string;
  strength: number;
  sharedIntentions: string[];
  createdAt: Date;
}

interface Interaction {
  id: string;
  userId1: string;
  userId2: string;
  type: string;
  strength: number;
}

interface RoomState {
  users: User[];
  currentUser: User;
  connections: Connection[];
  activeInteractions: Interaction[];
  intentionsCatalog: UserIntention[];
  
  // –î–µ–π—Å—Ç–≤–∏—è
  setUserIntention: (intention: UserIntention) => void;
  updateUserPosition: (position: [number, number, number]) => void;
  findMatchingUsers: () => Connection[];
  joinRoom: (user: Partial<User>) => void;
  leaveRoom: (userId: string) => void;
  addInteraction: (interaction: Omit<Interaction, 'id'>) => void;
}

export const useRoomStore = create<RoomState>((set, get) => ({
  users: [],
  currentUser: {
    id: 'user-1',
    name: '–í—ã',
    position: [0, 0, 0],
    intentions: [],
    primaryIntention: null,
    trustLevel: 1,
    energy: 0.8,
    honestyScore: 0.9
  },
  connections: [],
  activeInteractions: [],
  
  intentionsCatalog: [
    { id: 'learn-psychology', type: 'learning', description: '–ò–∑—É—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é', emoji: 'üß†', priority: 1, createdAt: new Date() },
    { id: 'collab-project', type: 'collaboration', description: '–°–æ–≤–º–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç', emoji: 'ü§ù', priority: 1, createdAt: new Date() },
    { id: 'emotional-support', type: 'support', description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', emoji: 'üíù', priority: 1, createdAt: new Date() },
    { id: 'creative-work', type: 'creative', description: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞', emoji: 'üé®', priority: 1, createdAt: new Date() },
    { id: 'socialize', type: 'social', description: '–ü–æ–æ–±—â–∞—Ç—å—Å—è', emoji: 'üë•', priority: 1, createdAt: new Date() },
    { id: 'meditation', type: 'support', description: '–°–æ–≤–º–µ—Å—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è', emoji: 'üßò', priority: 1, createdAt: new Date() }
  ],
  
  setUserIntention: (intention: UserIntention) => {
    const state = get();
    const updatedIntentions = [...state.currentUser.intentions.filter(i => i.id !== intention.id), intention];
    const primaryIntention = updatedIntentions.sort((a, b) => b.priority - a.priority)[0] || null;
    
    set({
      currentUser: {
        ...state.currentUser,
        intentions: updatedIntentions,
        primaryIntention
      }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    get().findMatchingUsers();
  },
  
  updateUserPosition: (position: [number, number, number]) => {
    const state = get();
    set({
      currentUser: {
        ...state.currentUser,
        position
      }
    });
  },
  
  findMatchingUsers: () => {
    const state = get();
    const currentUser = state.currentUser;
    
    if (!currentUser.primaryIntention) return [];
    
    const newConnections: Connection[] = [];
    
    state.users.forEach(otherUser => {
      if (otherUser.id === currentUser.id) return;
      
      if (otherUser.primaryIntention && otherUser.primaryIntention.type === currentUser.primaryIntention.type) {
        const strength = calculateConnectionStrength(currentUser, otherUser);
        
        newConnections.push({
          id: `conn-${currentUser.id}-${otherUser.id}-${Date.now()}`,
          userId1: currentUser.id,
          userId2: otherUser.id,
          strength,
          sharedIntentions: [currentUser.primaryIntention.type],
          createdAt: new Date()
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        get().addInteraction({
          userId1: currentUser.id,
          userId2: otherUser.id,
          type: 'connection',
          strength
        });
      }
    });
    
    set({ connections: newConnections });
    return newConnections;
  },
  
  joinRoom: (userData: Partial<User>) => {
    const state = get();
    const newUser: User = {
      id: `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      name: userData.name || '–ê–Ω–æ–Ω–∏–º',
      position: userData.position || [Math.random() * 20 - 10, 0, Math.random() * 20 - 10],
      intentions: userData.intentions || [],
      primaryIntention: userData.primaryIntention || null,
      trustLevel: userData.trustLevel || 1,
      energy: userData.energy || 0.5,
      honestyScore: userData.honestyScore || 0.7
    };
    
    set({
      users: [...state.users, newUser]
    });
  },
  
  leaveRoom: (userId: string) => {
    const state = get();
    set({
      users: state.users.filter(user => user.id !== userId),
      connections: state.connections.filter(conn => 
        conn.userId1 !== userId && conn.userId2 !== userId
      )
    });
  },

  addInteraction: (interaction: Omit<Interaction, 'id'>) => {
    const state = get();
    const newInteraction: Interaction = {
      ...interaction,
      id: `interaction-${Date.now()}`
    };

    set({
      activeInteractions: [...state.activeInteractions, newInteraction]
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      const currentState = get();
      set({
        activeInteractions: currentState.activeInteractions.filter(i => i.id !== newInteraction.id)
      });
    }, 5000);
  }
}));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∏–ª—ã —Å–≤—è–∑–∏
const calculateConnectionStrength = (user1: User, user2: User): number => {
  let strength = 0;
  
  // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –Ω–∞–º–µ—Ä–µ–Ω–∏—é
  if (user1.primaryIntention?.type === user2.primaryIntention?.type) {
    strength += 0.6;
  }
  
  // –ë–ª–∏–∑–æ—Å—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
  const distance = Math.sqrt(
    Math.pow(user1.position[0] - user2.position[0], 2) +
    Math.pow(user1.position[1] - user2.position[1], 2) +
    Math.pow(user1.position[2] - user2.position[2], 2)
  );
  
  if (distance < 5) strength += 0.3;
  else if (distance < 10) strength += 0.1;
  
  // –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è
  strength += (user1.trustLevel + user2.trustLevel) * 0.05;
  
  return Math.min(strength, 1);
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
setTimeout(() => {
  const store = useRoomStore.getState();
  
  store.joinRoom({
    name: '–ê–Ω–Ω–∞',
    position: [5, 0, 3],
    primaryIntention: store.intentionsCatalog[0],
    trustLevel: 2,
    energy: 0.7,
    honestyScore: 0.8
  });
  
  store.joinRoom({
    name: '–ú–∞–∫—Å–∏–º', 
    position: [-3, 0, 6],
    primaryIntention: store.intentionsCatalog[1],
    trustLevel: 3,
    energy: 0.9,
    honestyScore: 0.95
  });
  
  store.joinRoom({
    name: '–°–æ—Ñ–∏—è',
    position: [2, 0, -4],
    primaryIntention: store.intentionsCatalog[0],
    trustLevel: 1,
    energy: 0.6,
    honestyScore: 0.7
  });
}, 1000);

--- src/stores/system-store.ts ---
import { create } from 'zustand';

interface User {
  id: string;
  name: string;
  role: 'yara' | 'terminal';
  permissions: Permission[];
  trustLevel: number;
  honestyScore: number;
  behaviorPatterns: BehaviorPattern[];
}

interface Permission {
  module: 'matching' | 'analytics' | 'moderation' | 'system';
  level: 'read' | 'write' | 'admin';
}

interface BehaviorPattern {
  type: 'consistent' | 'contradictory' | 'evolving';
  confidence: number;
  lastUpdated: Date;
}

interface UserIntention {
  id: string;
  type: 'learning' | 'collaboration' | 'support' | 'creative' | 'social';
  description: string;
  emoji: string;
  priority: number;
  createdAt: Date;
}

interface SystemState {
  currentMode: 'room' | 'cabinet';
  realityTransition: boolean;
  currentUser: User;
  
  // –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  permissions: {
    yara: {
      matching: 'admin',
      analytics: 'admin', 
      moderation: 'admin',
      system: 'admin'
    },
    terminal: {
      matching: 'read',
      analytics: 'read',
      moderation: 'read', 
      system: 'read'
    }
  };
  
  // –î–µ–π—Å—Ç–≤–∏—è
  switchMode: (mode: 'room' | 'cabinet') => void;
  setUserIntention: (intention: UserIntention) => void;
  analyzeHonesty: (userId: string) => number;
  hasPermission: (module: string, level: string) => boolean;
}

export const useSystemStore = create<SystemState>((set, get) => ({
  currentMode: 'room',
  realityTransition: false,
  
  currentUser: {
    id: 'yara-001',
    name: '–Ø—Ä–∞',
    role: 'yara',
    trustLevel: 4,
    honestyScore: 0.95,
    permissions: [
      { module: 'matching', level: 'admin' },
      { module: 'analytics', level: 'admin' },
      { module: 'moderation', level: 'admin' },
      { module: 'system', level: 'admin' }
    ],
    behaviorPatterns: [
      { type: 'consistent', confidence: 0.9, lastUpdated: new Date() }
    ]
  },
  
  permissions: {
    yara: {
      matching: 'admin',
      analytics: 'admin',
      moderation: 'admin',
      system: 'admin'
    },
    terminal: {
      matching: 'read',
      analytics: 'read',
      moderation: 'read',
      system: 'read'
    }
  },
  
  switchMode: (mode) => {
    set({ realityTransition: true });
    
    setTimeout(() => {
      set({ 
        currentMode: mode,
        realityTransition: false 
      });
    }, 800);
  },
  
  setUserIntention: (intention) => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    const state = get();
    const honestyScore = get().analyzeHonesty(state.currentUser.id);
    
    set({
      currentUser: {
        ...state.currentUser,
        honestyScore
      }
    });
  },
  
  analyzeHonesty: (userId) => {
    // –ê–ª–≥–æ—Ä–∏—Ç–º –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    // 1. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    // 2. –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏–π
    // 3. –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    // 4. –û—Ç–∑—ã–≤—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    const baseScore = 0.7;
    const behaviorBonus = 0.2;
    const consistencyBonus = 0.1;
    
    return Math.min(baseScore + behaviorBonus + consistencyBonus, 1);
  },
  
  hasPermission: (module, level) => {
    const state = get();
    const userRole = state.currentUser.role;
    const userPermissions = state.permissions[userRole];
    
    const permissionLevels = { 'read': 1, 'write': 2, 'admin': 3 };
    const requiredLevel = permissionLevels[level];
    const userLevel = permissionLevels[userPermissions[module]];
    
    return userLevel >= requiredLevel;
  }
}));

--- src/types/system.ts ---
export interface User {
  id: string;
  name: string;
  spiritualLevel: number;
  connectionStrength: number;
}

export interface AIConversation {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

export interface AIGuidance {
  id: string;
  title: string;
  description: string;
  priority: 'low' | 'medium' | 'high';
  category: string;
}

export interface UserMetrics {
  practiceConsistency: number;
  growthVelocity: number;
  patternStability: number;
  milestoneFrequency: number;
}

export interface BehaviorPattern {
  id: string;
  name: string;
  description: string;
  strength: number;
  trend: 'increasing' | 'decreasing' | 'stable';
}

export interface AnalyticsInsight {
  id: string;
  title: string;
  description: string;
  impact: number;
  category: string;
}

export interface GrowthPrediction {
  period: string;
  predictedGrowth: number;
  confidence: number;
  factors: string[];
}

export interface ConnectedUser {
  id: string;
  name: string;
  spiritualLevel: number;
  status: 'online' | 'offline' | 'busy';
  currentActivity: string;
}

export interface Session {
  id: string;
  name: string;
  host: User;
  participants: ConnectedUser[];
  activityType: string;
  startTime: Date;
  endTime: Date;
}

export interface GroupActivity {
  id: string;
  name: string;
  description: string;
  participants: number;
  maxParticipants: number;
  spiritualFocus: string;
}

export interface SessionInvitation {
  id: string;
  session: Session;
  invitedBy: User;
  expiresAt: Date;
}

export interface Achievement {
  id: string;
  name: string;
  description: string;
  icon: string;
  unlocked: boolean;
  unlockedAt?: Date;
  progress?: number;
}

export interface Quest {
  id: string;
  name: string;
  description: string;
  objectives: QuestObjective[];
  reward: QuestReward;
  expiresAt: Date;
}

export interface QuestObjective {
  type: string;
  target: number;
  current: number;
}

export interface QuestReward {
  xp: number;
  items: string[];
}

export interface Reward {
  id: string;
  name: string;
  description: string;
  type: 'xp' | 'item' | 'badge';
  value: number;
}

export interface LeaderboardEntry {
  userId: string;
  name: string;
  level: number;
  xp: number;
  rank: number;
}

export interface SpiritualAction {
  type: string;
  data: any;
  timestamp: Date;
}

export interface ActionResponse {
  success: boolean;
  recommendations: AIGuidance[];
  rewards: Reward[];
}

--- src/utils/color-gradients.ts ---
export const getSpiritualColor = (conformity: number, level: number): string => {
  const colors = {
    0: ['#8B0000', '#DC143C', '#FF6347', '#FF7F50', '#FFA07A', '#FFB6C1', '#FFDAB9', '#FFE4E1'],
    1: ['#8B4513', '#D2691E', '#CD853F', '#F4A460', '#DEB887', '#D2B48C', '#BC8F8F', '#F5DEB3'],
    2: ['#006400', '#228B22', '#32CD32', '#90EE90', '#98FB98', '#8FBC8F', '#9ACD32', '#ADFF2F'],
    3: ['#00008B', '#0000CD', '#1E90FF', '#87CEEB', '#87CEFA', '#B0C4DE', '#B0E0E6', '#ADD8E6'],
  };
  
  const spectrum = colors[level as keyof typeof colors] || colors[0];
  const index = Math.floor(conformity * (spectrum.length - 1));
  return spectrum[Math.max(0, Math.min(spectrum.length - 1, index))];
};

export const calculateOrbitRadius = (baseRadius: number, activity: number): number => {
  return 0.1 + activity * 19.9;
};

--- src/utils/spiritual-algorithms.ts ---
export const calculateVerticalPressure = (level: number, etalonForce: number): number => {
  const pressureFactors = [0.9, 0.7, 0.5, 0.3, 0.1];
  return etalonForce * (pressureFactors[level] || 0.1);
};

export const generateInsights = (state: any): string[] => {
  const insights: string[] = [];
  const overallConformity = Object.values(state.vertical).reduce((acc: number, level: any) => acc + level.conformity, 0) / 5;
  
  if (overallConformity < 0.3) {
    insights.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å –¥—É—Ö–æ–≤–Ω—ã–º —ç—Ç–∞–ª–æ–Ω–æ–º');
  }
  
  if (state.velocities.cyclic > 0.8) {
    insights.push('–í—ã—Å–æ–∫–∞—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å - –Ω–µ–æ—Å–≤–æ–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è');
  }
  
  if (state.velocities.diagonal > 0.6) {
    insights.push('–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π —Å–Ω–æ—Å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫—É—Ä—Å–∞');
  }
  
  if (state.etalonForce < 0.4) {
    insights.push('–ù–∏–∑–∫–∞—è —ç—Ç–∞–ª–æ–Ω–Ω–∞—è —Å–∏–ª–∞ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–≥–ª—É–±–ª–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏');
  }
  
  return insights;
};
