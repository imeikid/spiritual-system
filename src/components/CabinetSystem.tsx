import React, { useState } from 'react';
import { useSystemStore } from '../stores/system-store';
import { useRoomStore } from '../stores/room-store';

export const CabinetSystem: React.FC = () => {
  const { currentUser, hasPermission } = useSystemStore();
  const { users, connections } = useRoomStore();
  const [activeTool, setActiveTool] = useState<'analytics' | 'matching' | 'development'>('development');
  
  return (
    <div className="cabinet-system">
      <div className="cabinet-header">
        <h1>üõ∏ –ö–∞–±–∏–Ω–µ—Ç –û—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –†–∞–∑–≤–∏—Ç–∏—è</h1>
        <p>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π</p>
      </div>
      
      <div className="cabinet-tools">
        <button 
          className={activeTool === 'development' ? 'active' : ''}
          onClick={() => setActiveTool('development')}
        >
          üßò –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –†–∞–∑–≤–∏—Ç–∏–µ
        </button>
        
        {hasPermission('analytics', 'read') && (
          <button 
            className={activeTool === 'analytics' ? 'active' : ''}
            onClick={() => setActiveTool('analytics')}
          >
            üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –°–∏—Å—Ç–µ–º—ã
          </button>
        )}
        
        {hasPermission('matching', 'read') && (
          <button 
            className={activeTool === 'matching' ? 'active' : ''}
            onClick={() => setActiveTool('matching')}
          >
            ü§ù –°–∏—Å—Ç–µ–º–∞ –ú–∞—Ç—á–∏–Ω–≥–∞
          </button>
        )}
      </div>
      
      <div className="tool-content">
        {activeTool === 'development' && <PersonalDevelopmentTool />}
        {activeTool === 'analytics' && <AnalyticsTool />}
        {activeTool === 'matching' && <MatchingTool />}
      </div>
    </div>
  );
};

const PersonalDevelopmentTool: React.FC = () => {
  const { currentUser } = useSystemStore();
  
  return (
    <div className="development-tool">
      <h3>üß† –í–∞—à –ü—É—Ç—å –†–∞–∑–≤–∏—Ç–∏—è</h3>
      
      <div className="development-metrics">
        <div className="metric">
          <label>–£—Ä–æ–≤–µ–Ω—å —á–µ—Å—Ç–Ω–æ—Å—Ç–∏:</label>
          <div className="metric-value">
            <div 
              className="metric-bar" 
              style={{ width: `${currentUser.honestyScore * 100}%` }}
            ></div>
            <span>{Math.round(currentUser.honestyScore * 100)}%</span>
          </div>
        </div>
        
        <div className="metric">
          <label>–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è:</label>
          <div className="metric-value">
            <div 
              className="metric-bar" 
              style={{ width: `${(currentUser.trustLevel / 4) * 100}%` }}
            ></div>
            <span>{currentUser.trustLevel}/4</span>
          </div>
        </div>
      </div>
      
      <div className="reflection-zone">
        <h4>üìù –ó–æ–Ω–∞ –†–µ—Ñ–ª–µ–∫—Å–∏–∏</h4>
        <textarea 
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∏–Ω—Å–∞–π—Ç—ã –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è..."
          rows={6}
        />
        <button className="save-btn">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ñ–ª–µ–∫—Å–∏—é</button>
      </div>
      
      <div className="practice-exercises">
        <h4>üéØ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –†–∞–∑–≤–∏—Ç–∏—è</h4>
        <div className="exercises-grid">
          <div className="exercise">
            <h5>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏</h5>
            <p>10 –º–∏–Ω—É—Ç –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –¥—ã—Ö–∞–Ω–∏–µ–º</p>
            <button>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>
          </div>
          <div className="exercise">
            <h5>–ê–Ω–∞–ª–∏–∑ –ù–∞–º–µ—Ä–µ–Ω–∏–π</h5>
            <p>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è</p>
            <button>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>
          </div>
          <div className="exercise">
            <h5>–†–∞–∑–≤–∏—Ç–∏–µ –≠–º–ø–∞—Ç–∏–∏</h5>
            <p>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö</p>
            <button>‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å</button>
          </div>
        </div>
      </div>
    </div>
  );
};

const AnalyticsTool: React.FC = () => {
  const { users, connections } = useRoomStore();
  const { hasPermission } = useSystemStore();
  
  if (!hasPermission('analytics', 'read')) {
    return <div>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ</div>;
  }
  
  return (
    <div className="analytics-tool">
      <h3>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –°–∏—Å—Ç–µ–º—ã</h3>
      
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-value">{users.length}</div>
          <div className="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω</div>
        </div>
        <div className="stat-card">
          <div className="stat-value">{connections.length}</div>
          <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–≤—è–∑–µ–π</div>
        </div>
        <div className="stat-card">
          <div className="stat-value">
            {users.length > 0 ? Math.round(users.reduce((acc, user) => acc + user.honestyScore, 0) / users.length * 100) : 0}%
          </div>
          <div className="stat-label">–°—Ä–µ–¥–Ω—è—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å</div>
        </div>
      </div>
      
      <div className="users-list">
        <h4>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</h4>
        {users.map(user => (
          <div key={user.id} className="user-analytics">
            <span className="user-name">{user.name}</span>
            <span className="user-stats">
              –ß–µ—Å—Ç–Ω–æ—Å—Ç—å: {Math.round(user.honestyScore * 100)}% | 
              –î–æ–≤–µ—Ä–∏–µ: {user.trustLevel}/4 |
              –ù–∞–º–µ—Ä–µ–Ω–∏–µ: {user.primaryIntention?.emoji || '‚ùì'}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
};

const MatchingTool: React.FC = () => {
  const { users, connections } = useRoomStore();
  const { hasPermission } = useSystemStore();
  
  if (!hasPermission('matching', 'read')) {
    return <div>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –º–∞—Ç—á–∏–Ω–≥–∞</div>;
  }
  
  const findOptimalMatches = () => {
    // –ê–ª–≥–æ—Ä–∏—Ç–º –º–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –Ø—Ä—ã
    return users
      .filter(user => user.id !== 'yara-001')
      .map(user => ({
        user,
        matchScore: calculateMatchScore(user),
        reasons: ['–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–π', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏']
      }))
      .sort((a, b) => b.matchScore - a.matchScore);
  };
  
  const optimalMatches = findOptimalMatches();
  
  return (
    <div className="matching-tool">
      <h3>ü§ù –°–∏—Å—Ç–µ–º–∞ –ú–∞—Ç—á–∏–Ω–≥–∞ (ROOT)</h3>
      <p>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞</p>
      
      <div className="matches-list">
        {optimalMatches.map((match, index) => (
          <div key={match.user.id} className="match-card">
            <div className="match-header">
              <span className="match-rank">#{index + 1}</span>
              <span className="user-name">{match.user.name}</span>
              <span className="match-score">{Math.round(match.matchScore * 100)}%</span>
            </div>
            <div className="match-reasons">
              {match.reasons.map((reason, i) => (
                <span key={i} className="reason-tag">‚úì {reason}</span>
              ))}
            </div>
            <div className="match-actions">
              <button className="action-btn">üí¨ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ</button>
              <button className="action-btn">üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
const calculateMatchScore = (user: any): number => {
  const baseScore = 0.5;
  const honestyBonus = user.honestyScore * 0.3;
  const trustBonus = (user.trustLevel / 4) * 0.2;
  
  return baseScore + honestyBonus + trustBonus;
};

// –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞–±–∏–Ω–µ—Ç–∞
const cabinetStyles = `
  .cabinet-system {
    height: 100vh;
    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    color: white;
    padding: 20px;
    overflow-y: auto;
  }
  
  .cabinet-header {
    text-align: center;
    margin-bottom: 30px;
  }
  
  .cabinet-header h1 {
    color: #4ecdc4;
    margin-bottom: 10px;
  }
  
  .cabinet-tools {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    justify-content: center;
  }
  
  .cabinet-tools button {
    padding: 12px 20px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid #444;
    border-radius: 10px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .cabinet-tools button.active {
    background: rgba(78, 205, 196, 0.2);
    border-color: #4ecdc4;
  }
  
  .cabinet-tools button:hover {
    background: rgba(255, 255, 255, 0.2);
  }
  
  .tool-content {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 15px;
    padding: 20px;
    min-height: 500px;
  }
  
  .development-metrics {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .metric {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
  }
  
  .metric-value {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 8px;
  }
  
  .metric-bar {
    height: 8px;
    background: linear-gradient(45deg, #4ecdc4, #45b7d1);
    border-radius: 4px;
    transition: width 0.3s ease;
  }
  
  .reflection-zone textarea {
    width: 100%;
    padding: 12px;
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid #444;
    border-radius: 8px;
    color: white;
    margin-bottom: 10px;
    resize: vertical;
  }
  
  .save-btn {
    padding: 10px 20px;
    background: #4ecdc4;
    border: none;
    border-radius: 8px;
    color: white;
    cursor: pointer;
  }
  
  .exercises-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 15px;
    margin-top: 15px;
  }
  
  .exercise {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
    text-align: center;
  }
  
  .exercise button {
    margin-top: 10px;
    padding: 8px 16px;
    background: #ff6b6b;
    border: none;
    border-radius: 20px;
    color: white;
    cursor: pointer;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 15px;
    margin-bottom: 20px;
  }
  
  .stat-card {
    background: rgba(255, 255, 255, 0.1);
    padding: 20px;
    border-radius: 10px;
    text-align: center;
  }
  
  .stat-value {
    font-size: 2em;
    color: #4ecdc4;
    font-weight: bold;
  }
  
  .user-analytics {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 6px;
    margin-bottom: 8px;
  }
  
  .match-card {
    background: rgba(255, 255, 255, 0.1);
    padding: 15px;
    border-radius: 10px;
    margin-bottom: 15px;
    border-left: 4px solid #4ecdc4;
  }
  
  .match-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .match-score {
    color: #ffd93d;
    font-weight: bold;
  }
  
  .match-reasons {
    margin-bottom: 10px;
  }
  
  .reason-tag {
    background: rgba(78, 205, 196, 0.2);
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8em;
    margin-right: 8px;
  }
  
  .match-actions {
    display: flex;
    gap: 10px;
  }
  
  .action-btn {
    padding: 6px 12px;
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid #444;
    border-radius: 15px;
    color: white;
    cursor: pointer;
    font-size: 0.8em;
  }
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement("style");
styleSheet.innerText = cabinetStyles;
document.head.appendChild(styleSheet);

export default CabinetSystem;
